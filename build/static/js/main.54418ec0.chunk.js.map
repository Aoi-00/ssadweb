{"version":3,"sources":["components/questionpage/SolutionModal.jsx","components/questionpage/QuestionList.jsx","Redux/Actions/QuestActions.jsx","assets/ganyu.jpg","components/share/Navbar.jsx","components/share/Footer.jsx","components/questionpage/TutQuestionList.jsx","pages/Question.jsx","Redux/Actions/TwitterAction.jsx","Redux/Actions/GameActions.jsx","components/homepage/LeaderBoard.jsx","components/homepage/TwitterCard.jsx","pages/Home.jsx","components/share/GuestNavBar.jsx","Redux/Actions/AuthAction.jsx","components/loginpage/LoginForm.jsx","pages/Login.jsx","components/registerpage/RegisterForm.jsx","pages/Register.jsx","components/assignmentpage/TutorialTable.jsx","Redux/Actions/TutorialAction.jsx","components/assignmentpage/AddTutorial.jsx","pages/Assignment.jsx","pages/Logout.jsx","components/marking/StudentInfo.jsx","components/marking/MarkScoreComment.jsx","components/marking/MarkPicture.jsx","pages/Marking.jsx","pages/MarkingHome.jsx","pages/StudentSelect.jsx","components/studentmainpage/StudentSubmit.jsx","pages/StudentMain.jsx","components/share/Uploadfile.jsx","components/studentprofile/StudentProfileCard.jsx","pages/StudentProfile.jsx","components/profprofile/ProfProfileCard.jsx","pages/ProfessorProfile.jsx","pages/StudentNews.jsx","components/competepage/ClassmateList.jsx","components/competepage/StudentAssignment.jsx","pages/Compete.jsx","components/challengerpage/Competitorlist.jsx","components/challengerpage/Challengerlist.jsx","assets/friendly.jpg","pages/Challenger.jsx","components/challengerpage/CompetitorDetail.jsx","components/challengerpage/MyDetails.jsx","pages/Competitor.jsx","components/challengerpage/ChallengerDetail.jsx","pages/Challenge.jsx","components/mysubmissionpage/StudentCard.jsx","pages/MySubmission.jsx","components/reportpage/BarGraph.jsx","components/reportpage/StatisticalAnalysis.jsx","components/reportpage/LineGraph.jsx","components/reportpage/StudentCard.jsx","pages/Report.jsx","components/reportpage/TutorialAvgGraph.jsx","pages/ReportHome.jsx","router/Routes.js","Redux/Reducers/AuthReducers.jsx","Redux/Reducers/TwitterReducers.jsx","Redux/Reducers/GameReducers.jsx","Redux/Reducers/TutorialReducers.jsx","Redux/Reducers/QuestReducers.jsx","Redux/Reducers/RootReducer.jsx","Redux/Store/Store.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Component","QuestionList","questions","addQuestion","striped","map","x","index","question","size","color","onClick","onAdd","questid","showTutorialQuestion","postData","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","type","payload","Navbar","state","collapseID","username","localStorage","getItem","usertype","toggleCollapse","this","setState","prevState","closeCollapse","collID","window","scrollTo","componentDidMount","props","validateLogin","render","dark","expand","fixed","scrolling","href","className","src","ganyu","height","alt","id","isOpen","navbar","right","exact","to","nav","caret","icon","Footer","Date","getFullYear","TutQuestionList","removeQuestion","onDelete","Question","tutid","match","params","getTutorialQuestions","form","getQuestionList","showAllQuestion","NotLoggedIn","history","push","getTutGrp","deleteQuestion","OnBack","addToTutorial","currentQuestion","allquestion","filter","post","tutgrp","solution","level","section","hint","filteredAllQuestion","tutquestion","find","z","Fragment","data-height","data-width","width","mozallowfullscreen","allow","msallowfullscreen","allowFullScreen","webkitallowfullscreen","allowtransparency","frameBorder","connect","quest","tutquestions","fetchPosts","fetchLeaderboard","getStudentSubmission","myCompletedTutorial","getCurrentUserScore","getCompetitorScore","LeaderBoard","dataTable","display","PopulateTable","columns","label","field","attributes","sort","rows","leaderboard","name","date","score","hover","entriesOptions","entries","searchTop","searchBottom","pagesAmount","searchdata","TwitterCard","style","waves","user","text","target","id_str","Home","twitterPosts","twitter","count","items","game","records","GuestNavbar","getStudentInfo","updateProfile","facebookAccountLink","getCompeteMyInfo","LoginForm","React","email","userpassword","fbid","fblogin","emaillogin","loading","wrongauth","emailError","passwordError","exceedtry","handleChange","e","value","validate","includes","EmailLogin","password","emailLogin","responseFacebook","response","FbLogin","facebookLogin","handleKeyPress","event","key","componentWillReceiveProps","nextProps","loginstatus","length","setItem","picture","Navigate","delay","outline","md","xl","iconClass","onChange","fontSize","onKeyPress","disabled","appId","fields","cssClass","callback","auth","login","Login","val","RegisterForm","cfmpassword","fbimage","fbdetails","nameError","cfmPasswordError","console","log","url","handleSelectList","Validate","isValid","emailForm","emailChecking","Register","registerUser","componentDidUpdate","prevProps","alert","textButton","registerstatus","status","emailcheck","TutorialTable","deleteTut","ViewTutorial","navigate","tutorial","tutname","createdby","addTutorial","showTutorials","showProfTutorial","AddTutorial","tutGroup","tutName","coins","userType","onSubmit","difficulty","addTut","getValue","handleTutList","group","error","success","htmlFor","min","max","onBack","tutorialgrp","Assignment","GetTutorials","DelTutorial","deleteTutorial","tutorialtable","Logout","clear","StudentInfo","student","MarkScoreComment","record","inputChange","markComplete","goBack","scoreError","commentError","placeholder","MarkPicture","image","Marking","submissionid","studid","comment","Number","MarkingComplete","updateScores","GoBack","getStudentDetails","getSubmission","Proptypes","func","isRequired","submission","questionlist","studentinfo","scores","MarkingHome","showUserTutorial","StudentSelect","ViewDetails","getStudents","studentlist","students","StudentSubmit","onSelect","ldrid","selectSubmission","mycompletedtask","StudentMain","viewMySubmission","completedtut","Uploadfile","file","onChangeHandleFile","files","reader","FileReader","readAsDataURL","addEventListener","result","picUpload","inputs","containerClassName","StudentProfileCard","studname","profilepic","studemail","studtutgrp","StudentProfile","fbDisplay","onChoose","onSubmitAll","PictureUploaded","pic","FbLink","facebookBtn","allTutorials","ProfProfileCard","ProfessorProfile","getProfDetails","getProfInfo","lg","sm","profinfo","StudentNews","ClassmateList","selectCompetitor","competitorSelect","onHover","linkColor","classmate","classmates","onMouseOver","onMouseLeave","StudentAssignment","SendNotification","leaderboardid","notification","myCompletedtut","myTut","Compete","competitor","competitorid","Assignmentdisplay","CompetitorSelect","CreateNotification","requestorid","sendCompeteRequest","getMycompletedTutList","currentclass","classMates","Set","item","competeDisplay","mytut","Competitorlist","viewCompetition","compid","myldrid","myCompetitors","competitionid","Challengerlist","viewChallenge","oppldrid","challengerid","challenge","myChallenger","Challenger","ViewCompetition","ViewChallenge","CompeteMode","getCompetitor","getChallengers","getMyCompetitors","center","friendly","overlay","competitors","challengers","CompetitorDetail","details","MyDetails","Competitor","mystudid","SendComment","sendComment","getCompetitorDetails","getCompetitorScoreBoard","getMyScore","getmyDetails","myscore","myScore","parseInt","competitorscore","resultDisplay","currentUserInfo","myInfo","ChallengerDetail","Challenge","retrieveComment","getMyScoreBoard","getOppScore","getComment","challengerScore","challengecomment","competitormsg","StudentCard","MySubmission","getLeaderBoardSubmission","ProfComment","studSubmission","answer","BarGraph","chartData","GraphData","ViewStudent","elem","ind","_index","viewStudent","PopulateData","labels","datasets","backgroundColor","borderColor","borderWidth","options","scales","xAxes","scaleLabel","labelString","yAxes","StatisticalAnalysis","parseFloat","average","standardDeviation","minimum","maximum","CalclateStatistics","Math","reduce","total","current","toFixed","sqrt","pow","summation","i","textWhite","LineGraph","LineGraphData","fill","profile","Report","StudentAnalysis","selectedStudent","printPage","print","CurrentAssginmentScores","HighestScoreForEachStudent","prevIndex","findIndex","AssignmentScoreList","TutorialAvgGraph","ViewReport","uniqueTutId","results","org","convertKeytoArray","Object","keys","k","tutidAvg","averageOnEachtut","getTutName","Routes","path","component","ReportHome","initState","AuthReducers","action","TwitterReducers","GameReducers","TutorialReducers","QuestReducers","RootReducer","combineReducers","middleWare","thunk","store","createStore","applyMiddleware","App","Store","marginTop","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","document","getElementById","URL","process","origin","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.54418ec0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\n\r\nclass SolutionModal extends Component {\r\n  /**\r\n   * state\r\n   * set modal to false\r\n   */\r\nstate = {\r\n  modal: false\r\n}\r\n\r\n/**\r\n * toggle\r\n * set modal to the opposite state\r\n */\r\ntoggle = () => {\r\n  this.setState({\r\n    modal: !this.state.modal\r\n  });\r\n}\r\n/**\r\n * SolutionModal\r\n * @returns \r\n */\r\nrender() {\r\n  return (\r\n    <MDBContainer>\r\n      <MDBBtn size=\"sm\" color=\"blue\" onClick={this.toggle}>View</MDBBtn>\r\n      <MDBModal isOpen={this.state.modal} toggle={this.toggle}>\r\n        <MDBModalHeader toggle={this.toggle}>Solution for Question {this.props.ind}</MDBModalHeader>\r\n        <MDBModalBody>\r\n          <p>Question: {this.props.question.question}</p><br/>\r\n          <p>Solution: {this.props.question.solution}</p>\r\n        </MDBModalBody>\r\n        <MDBModalFooter>\r\n          <MDBBtn color=\"red\" size=\"sm\" onClick={this.toggle}>Close</MDBBtn>\r\n        </MDBModalFooter>\r\n      </MDBModal>\r\n    </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SolutionModal;","import React from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\nimport SolutionModal from './SolutionModal'\r\n\r\n\r\nexport default function QuestionList({ questions, addQuestion }) {\r\n  let onAdd = (questid) => {\r\n    addQuestion(questid)\r\n  }\r\n  /**\r\n   * QuestionList\r\n   */\r\n  return (\r\n    <div>\r\n      <MDBTable striped>\r\n        <MDBTableHead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Add Question</th>\r\n          </tr>\r\n        </MDBTableHead>\r\n        <MDBTableBody>\r\n          {questions && questions.map((x, index) => {\r\n            return (\r\n              <tr key={x.questid}>\r\n                <td>{index + 1}</td>\r\n                <td>{x.question}</td>\r\n                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => onAdd(x.questid)}>Add</MDBBtn></td>              \r\n              </tr>\r\n            )\r\n          })}\r\n        </MDBTableBody>\r\n      </MDBTable>\r\n    </div>\r\n  )\r\n}\r\n","/**\r\n * Fetch addQuestions\r\n * @param {*} postData \r\n * @returns \r\n */\r\n\r\nexport const addQuestion = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/add/web/tutquest', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'ADD_QUESTION',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch deleteQuestion\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const deleteQuestion = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/delete/tutquest', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'REMOVE_QUESTION',\r\n            payload: postData.questid\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch showAllQuestions\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const showAllQuestion = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/show/tutquest', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'SHOW_ALL_QUESTION',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch showTutorialQuestion\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const showTutorialQuestion = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/show/tutquest', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'SHOW_TUT_QUESTION',\r\n            payload: data\r\n        })\r\n        );\r\n}","export default __webpack_public_path__ + \"static/media/ganyu.8b89bebd.jpg\";","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBDropdown, MDBDropdownMenu, MDBDropdownToggle, MDBIcon, MDBDropdownItem } from 'mdbreact';\r\nimport ganyu from '../../assets/ganyu.jpg';\r\n\r\nclass Navbar extends Component {\r\n    /**\r\n     * state\r\n     * set collapsedID : \"\"\r\n     * get username from local storage name\r\n     * get usertype from local storage usertype\r\n     */\r\n    state = {\r\n        collapseID: '',\r\n        username: localStorage.getItem(\"name\"),\r\n        usertype: localStorage.getItem(\"usertype\")\r\n    };\r\n    componentDidMount() {\r\n        if (!this.state.username)\r\n            this.props.validateLogin()\r\n    }\r\n\r\n    /**\r\n     * ToogleCollapsed\r\n     * @param {*} collapseID \r\n     * @returns \r\n     */\r\n    toggleCollapse = collapseID => () =>\r\n        this.setState(prevState => ({\r\n            collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n        }));\r\n\r\n        /**\r\n         * closeCollapsed\r\n         * @param {*} collID \r\n         * @returns \r\n         */\r\n    closeCollapse = collID => () => {\r\n        const { collapseID } = this.state;\r\n        window.scrollTo(0, 0);\r\n        collapseID === collID && this.setState({ collapseID: '' });\r\n    };\r\n\r\n    /**\r\n     * Navbar\r\n     * @returns Navbar\r\n     */\r\n    render() {\r\n        const { collapseID } = this.state;\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n            />\r\n        );\r\n        if (this.state.usertype == \"Professor\") {\r\n            return (\r\n                <div>\r\n                    <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n                        <MDBNavbarBrand href='/home' className='py-0 font-weight-bold'>\r\n                            <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\r\n                            <strong className='align-middle'>Ganyu</strong>\r\n                        </MDBNavbarBrand>\r\n                        <MDBNavbarToggler\r\n                            onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n                        />\r\n                        <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n                            <MDBNavbarNav right>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        exact\r\n                                        to='/home'\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                    >\r\n                                        <strong>Home</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/assignment'\r\n                                    >\r\n                                        <strong>Assignments</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/reporthome'\r\n                                    >\r\n                                        <strong>Report</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/seltut'\r\n                                    >\r\n                                        <strong>Marking</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBDropdown>\r\n                                        <MDBDropdownToggle nav caret>\r\n                                            <MDBIcon icon=\"user\" /> {this.state.username}\r\n                                        </MDBDropdownToggle>\r\n                                        <MDBDropdownMenu className=\"dropdown-default\">\r\n                                            <MDBDropdownItem href=\"/professorprofile\">Profile</MDBDropdownItem>\r\n                                            <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\r\n                                        </MDBDropdownMenu>\r\n                                    </MDBDropdown>\r\n                                </MDBNavItem>\r\n                            </MDBNavbarNav>\r\n                        </MDBCollapse>\r\n                    </MDBNavbar>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n                        <MDBNavbarBrand href='/home' className='py-0 font-weight-bold'>\r\n                            <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\r\n                            <strong className='align-middle'>SSAD Project</strong>\r\n                        </MDBNavbarBrand>\r\n                        <MDBNavbarToggler\r\n                            onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n                        />\r\n                        <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n                            <MDBNavbarNav right>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        exact\r\n                                        to='/studentmain'\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                    >\r\n                                        <strong>Home</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/studentnews'\r\n                                    >\r\n                                        <strong>News</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/challenger'\r\n                                    >\r\n                                        <strong>Compete</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink\r\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                        to='/assignment'\r\n                                    >\r\n                                        <strong>Assignments</strong>\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBDropdown>\r\n                                        <MDBDropdownToggle nav caret>\r\n                                            <MDBIcon icon=\"user\" /> {this.state.username}\r\n                                        </MDBDropdownToggle>\r\n                                        <MDBDropdownMenu className=\"dropdown-default\">\r\n                                            <MDBDropdownItem href=\"/studentprofile\">Profile</MDBDropdownItem>\r\n                                            <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\r\n                                        </MDBDropdownMenu>\r\n                                    </MDBDropdown>\r\n                                </MDBNavItem>\r\n                            </MDBNavbarNav>\r\n                        </MDBCollapse>\r\n                    </MDBNavbar>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Navbar","import React, { Component } from 'react'\r\nimport { MDBFooter } from 'mdbreact';\r\n\r\nexport default class Footer extends Component {\r\n    /**\r\n     * Footer \r\n     * @returns Footer\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MDBFooter className=\"fixed-bottom\" color='indigo'>\r\n                    <p className='footer-copyright mb-0 py-3 text-center'>\r\n                        &copy; {new Date().getFullYear()} Copyright:\r\n              <a href='#'> Team Ganyu (NTU Project) </a>\r\n                    </p>\r\n                </MDBFooter>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\nimport SolutionModal from './SolutionModal'\r\n\r\n\r\nexport default function TutQuestionList({ questions, removeQuestion }) {\r\n  let onDelete = (questid) => {\r\n    removeQuestion(questid)\r\n  }\r\n  /**\r\n   * TutQuestionList\r\n   */\r\n  return (\r\n    <div>\r\n      <MDBTable striped>\r\n        <MDBTableHead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Question</th>\r\n            <th>Remove</th>\r\n          </tr>\r\n        </MDBTableHead>\r\n        <MDBTableBody>\r\n          {questions && questions.map((x, index) => {\r\n            return (\r\n              <tr key={x.questid}>\r\n                <td>{index + 1}</td>\r\n                <td>{x.question}</td>\r\n                <td><MDBBtn size=\"sm\" color=\"red\" onClick={() => onDelete(x.questid)}>Remove</MDBBtn></td>              \r\n              </tr>\r\n            )\r\n          })}\r\n        </MDBTableBody>\r\n      </MDBTable>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol,MDBBtn } from \"mdbreact\";\r\nimport QuestionList from '../components/questionpage/QuestionList'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { showAllQuestion, addQuestion, deleteQuestion, showTutorialQuestion } from '../Redux/Actions/QuestActions'\r\nimport Navbar from '../components/share/Navbar';\r\nimport Footer from '../components/share/Footer';\r\nimport TutQuestionList from '../components/questionpage/TutQuestionList';\r\n\r\nclass Question extends Component {\r\n    /**\r\n     * state \r\n     * tutid : tutid\r\n     */\r\n    state = {\r\n        tutid: this.props.match.params.tutid,\r\n    };\r\n\r\n    /**\r\n     * getTutorialQuestions\r\n     */\r\n    getTutorialQuestions = () => {\r\n        const form = {\r\n            tutid: this.state.tutid,\r\n        }\r\n        this.props.showTutorialQuestion(form);\r\n    }\r\n    /**\r\n     * getQuestionList\r\n     */\r\n    getQuestionList = () => {\r\n        const form = {\r\n            tutid: '0',\r\n        }\r\n        this.props.showAllQuestion(form);\r\n    }\r\n    componentDidMount() {\r\n        this.getTutorialQuestions();\r\n        this.getQuestionList();\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * getTutGrp\r\n     * @returns tutgrp\r\n     */\r\n    getTutGrp = () => {\r\n        return localStorage.getItem(\"tutgrp\")\r\n    }\r\n    /**\r\n     * removeQuestion\r\n     * @param {*} questid \r\n     */\r\n    removeQuestion = (questid) => {\r\n        const form = {\r\n            questid: questid\r\n        }\r\n        this.props.deleteQuestion(form)\r\n    }\r\n    /**\r\n     * OnBack\r\n     */\r\n    OnBack = () => {\r\n        this.props.history.push('/assignment')\r\n    }\r\n    /**\r\n     * addToTutorial\r\n     * @param {*} questid \r\n     */\r\n    addToTutorial = (questid) => {\r\n        let currentQuestion = this.props.allquestion.filter(x => x.questid === questid)\r\n        const post = {\r\n            question: currentQuestion[0].question,\r\n            tutgrp: this.getTutGrp(),\r\n            tutid: this.state.tutid,\r\n            solution: currentQuestion[0].solution,\r\n            level: currentQuestion[0].level,\r\n            section: currentQuestion[0].section,\r\n            hint: currentQuestion[0].hint\r\n        }\r\n        this.props.addQuestion(post)\r\n    }\r\n    /**\r\n     * Question page\r\n     * @returns Question page\r\n     */\r\n    render() {\r\n        let filteredAllQuestion = this.props.allquestion.filter(x => !this.props.tutquestion.find(z => z.question === x.question))\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"12\">\r\n                            <br />\r\n                            <h2>Current Tutorial Questions</h2>\r\n                            <hr />\r\n                            <TutQuestionList removeQuestion={this.removeQuestion} questions={this.props.tutquestion} />\r\n                        </MDBCol>\r\n                        <MDBCol size=\"12\">\r\n                            <h2>Add Pre-defined Questions</h2>\r\n                            <hr />\r\n                            {/* <AddQuestion addQuest={this.AddQuestion} onBack={this.OnBack} /> */}\r\n                            <QuestionList addQuestion={this.addToTutorial} questions={filteredAllQuestion} />\r\n                        </MDBCol>\r\n                        <MDBCol size=\"12\">\r\n                            <h2>Add New Question</h2>\r\n                            <hr />\r\n                            <div id=\"html_embed_widget_11018\" className=\"html_embed_widget embed_wrapper\">\r\n                                <div data-height=\"3000\" data-width=\"3000\" className=\"game_frame game_loaded\" className=\"embed-responsive embed-responsive-16by9\">\r\n                                    <iframe height=\"100%\" width=\"100%\" mozallowfullscreen=\"true\" allow=\"autoplay; fullscreen; geolocation; microphone; camera; midi\" src=\"https://aseweb.hyunatic.com/\" msallowfullscreen=\"true\" scrolling=\"no\" allowFullScreen={true} webkitallowfullscreen=\"true\" id=\"game_drop\" allowtransparency=\"true\" frameBorder=\"0\">\r\n                                    </iframe>\r\n                                </div>\r\n                            </div>\r\n                            <MDBBtn color=\"red\" onClick={this.OnBack}> Back\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <br />\r\n                <br />\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nQuestion.propTypes = {\r\n    showAllQuestion: PropTypes.func.isRequired,\r\n    addQuestion: PropTypes.func.isRequired,\r\n    deleteQuestion: PropTypes.func.isRequired,\r\n    showTutorialQuestion: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    tutquestion: state.quest.tutquestions,\r\n    allquestion: state.quest.questions\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, { showTutorialQuestion, showAllQuestion, addQuestion, deleteQuestion })(Question)","/**\r\n * Fetch Twitterpost\r\n * @returns \r\n */\r\nexport const fetchPosts = () => dispatch => {\r\n    fetch('https://breadplaza.com/api/public/index.php/api/ntusg')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_POST',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n","/**\r\n * Fetch leaderboard\r\n * @returns \r\n */\r\n\r\nexport const fetchLeaderboard = () => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/leaderboard')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_LEADERBOARD',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch getStudents\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getStudents = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/tut/student', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_STUDENT_LIST',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getStudentSubmission\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getStudentSubmission = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/student/submission', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_STUDENT_SUBMISSION',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch updateScores\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const updateScores = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/marking/update', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'UPDATE_SCORES',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch mycompletedTutorial\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const myCompletedTutorial = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/student/completed/tut', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'MY_COMPLETED_TUT',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch sendCompeteRequest\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const sendCompeteRequest = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/start/compete', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'SEND_COMPETE_REQUEST',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getChallengers\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getChallengers = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/challengers', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_CHALLENGERS',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getMyCompetitors\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getMyCompetitors = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/competitors', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_COMPETITORS',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch sendComment\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const sendComment = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/send/comment', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'SEND_COMMENT',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch getComment\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getComment = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/comment', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_COMMENT',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getCurrentUserScore\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getCurrentUserScore = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/user/competitor', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_MY_SCORE',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getCompetitorScore\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getCompetitorScore = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/competitor', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_COMPETITOR_SCORE',\r\n            payload: data\r\n        })\r\n        );\r\n}","import React, { Component } from 'react'\r\nimport { MDBDataTableV5 } from 'mdbreact';\r\n\r\nexport default class LeaderBoard extends Component {\r\n  \r\n  /**\r\n   * set display to false\r\n   */\r\n  state = {\r\n    dataTable: {},\r\n    display: false\r\n  }\r\n  componentDidMount() {\r\n    this.PopulateTable()\r\n  }\r\n\r\n  /**\r\n   * Leaderboard\r\n   * set display to true and display the leaderboard table\r\n   */\r\n  PopulateTable() {\r\n    this.setState({\r\n      display: true,\r\n      dataTable: {\r\n        columns: [\r\n          {\r\n            label: 'Name',\r\n            field: 'name',\r\n            width: 150,\r\n            attributes: {\r\n              'aria-controls': 'DataTable',\r\n              'aria-label': 'Name',\r\n            },\r\n          },\r\n          {\r\n            label: 'Date submitted',\r\n            field: 'date',\r\n            sort: 'disabled',\r\n            width: 150,\r\n          },\r\n          {\r\n            label: 'Score',\r\n            field: 'score',\r\n            sort: 'asc',\r\n            width: 100,\r\n          },\r\n        ],\r\n        rows: [...this.props.leaderboard.filter(x => x.tutgrp === this.props.tutgrp).map(x => ({ name: x.name, date: x.date, score: x.score }))],\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.display && <MDBDataTableV5 hover entriesOptions={[5, 10, 15]} entries={5} searchTop searchBottom={false} pagesAmount={4} searchdata={this.state.dataTable} />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from 'mdbreact';\r\n\r\nconst TwitterCard = ({ post }) => {\r\n  /**\r\n   * Twiitercard\r\n   * Display the twitter card and a lead to the website upon clicking on the button.\r\n   */\r\n  return (\r\n    <MDBCol key={post.id_str} size=\"4\">\r\n      <MDBCard style={{ width: \"22rem\" }}>\r\n        <MDBCardImage className=\"img-fluid\" src=\"https://download.logo.wine/logo/Nanyang_Technological_University/Nanyang_Technological_University-Logo.wine.png\" waves />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{post.user.name}</MDBCardTitle>\r\n          <MDBCardText>\r\n            {post.text}\r\n          </MDBCardText>\r\n          <MDBBtn color=\"green\" href=\"https://twitter.com/NTUsg?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\"  target=\"_blank\">View</MDBBtn>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </MDBCol>\r\n  )\r\n}\r\n\r\nexport default TwitterCard;\r\n","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\"\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\r\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\r\nimport LeaderBoard from '../components/homepage/LeaderBoard'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport TwitterCard from '../components/homepage/TwitterCard'\r\n\r\n\r\n\r\nclass Home extends Component {\r\n    /**\r\n     * state\r\n     * set usertype to local storage usertype\r\n     * set tutgrp to local storage tutgrp\r\n     */\r\n    state = {\r\n        usertype: localStorage.getItem(\"usertype\"),\r\n        tutgrp: localStorage.getItem(\"tutgrp\")\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.usertype == \"Student\")\r\n            this.props.history.push(\"/studentmain\")\r\n        this.props.fetchLeaderboard();\r\n        this.props.fetchPosts();\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * Home page\r\n     * @returns Home page\r\n     */\r\n    render() {\r\n        let twitterPosts = this.props.twitter.map(x => {\r\n            return (\r\n                <TwitterCard key={x.id_str} post={x} />\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <MDBAnimation type=\"slideInDown\" count={1}>\r\n                        <br />\r\n                        \r\n                        <h2>LeaderBoard</h2>\r\n                        <hr />\r\n                        {this.props.leaderboard && <LeaderBoard leaderboard={this.props.leaderboard} tutgrp={this.state.tutgrp} />}\r\n                        <br />\r\n                    </MDBAnimation >\r\n                    <MDBAnimation type=\"slideInUp\" count={1}>\r\n                        <h2>NTU Twitter News</h2>\r\n                        <hr />\r\n                        <MDBRow>\r\n                            {twitterPosts}\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n\r\n                </MDBContainer>\r\n                <MDBBtn />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nHome.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    fetchLeaderboard: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    twitter: state.twitter.items,\r\n    leaderboard: state.game.records\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts, fetchLeaderboard })(Home)\r\n","import React, { Component } from 'react'\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink } from 'mdbreact';\r\nimport ganyu from '../../assets/ganyu.jpg';\r\n\r\nclass GuestNavbar extends Component {\r\n    /**\r\n     * state\r\n     * set collapsedID : \"\"\r\n     */\r\n    state = {\r\n        collapseID: ''\r\n    };\r\n    toggleCollapse = collapseID => () =>\r\n        this.setState(prevState => ({\r\n            collapseID: prevState.collapseID !== collapseID ? collapseID : ''\r\n        }));\r\n\r\n    closeCollapse = collID => () => {\r\n        const { collapseID } = this.state;\r\n        window.scrollTo(0, 0);\r\n        collapseID === collID && this.setState({ collapseID: '' });\r\n    };\r\n\r\n    /**\r\n     * Guest Navbar\r\n     * @returns Guest Navbar \r\n     */\r\n    render() {\r\n        const { collapseID } = this.state;\r\n        const overlay = (\r\n            <div\r\n                id='sidenav-overlay'\r\n                style={{ backgroundColor: 'transparent' }}\r\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n            />\r\n        );\r\n        return (\r\n\r\n            <div>\r\n                <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\r\n                    <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\r\n                    <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\r\n                        <strong className='align-middle'>Ganyu</strong>\r\n                    </MDBNavbarBrand>\r\n                    <MDBNavbarToggler\r\n                        onClick={this.toggleCollapse('mainNavbarCollapse')}\r\n                    />\r\n                    <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\r\n                        <MDBNavbarNav right>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink\r\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                    to='/register'\r\n                                >\r\n                                    <strong>Register</strong>\r\n                                </MDBNavLink>\r\n                            </MDBNavItem>\r\n                            <MDBNavItem>\r\n                                <MDBNavLink\r\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\r\n                                    to='/logout'\r\n                                >\r\n                                    <strong>Login</strong>\r\n                                </MDBNavLink>\r\n                            </MDBNavItem>\r\n                        </MDBNavbarNav>\r\n                    </MDBCollapse>\r\n                </MDBNavbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default GuestNavbar","/**\r\n * Fetch emaillogin\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const emailLogin = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'EMAIL_LOGIN',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch facebooklogin\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const facebookLogin = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/fblogin', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FACEBOOK_LOGIN',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch registerUSer\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const registerUser = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'REGISTER_USER',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch testCall\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const testCall = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/test', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'TESTING',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch getStudentInfo\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getStudentInfo = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/studentinfo', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_STUDENT_DETAILS',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getProfInfo\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getProfInfo = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/profinfo', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_PROF_DETAILS',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch updateProfile\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const updateProfile = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/profile/update', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'UPDATE_PROFILE',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch facebookAccountLink\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const facebookAccountLink = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/facebook/link', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FACEBOOK_ACCOUNT_LINK',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch emailChecking\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const emailChecking = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/email/check', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'EMAIL_CHECK',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch getCompeteMyInfo\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const getCompeteMyInfo = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/studentinfo', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'GET_MY_DETAILS',\r\n            payload: data\r\n        })\r\n        );\r\n}","import React from \"react\";\r\nimport {\r\n  MDBMask,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBIcon,\r\n  MDBBtn,\r\n  MDBView,\r\n  MDBContainer,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBInput,\r\n  MDBAnimation,\r\n  MDBNavLink\r\n} from \"mdbreact\";\r\nimport \"../css/index.css\";\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { emailLogin, facebookLogin } from '../../Redux/Actions/AuthAction'\r\nimport FacebookLogin from 'react-facebook-login'\r\n\r\nclass LoginForm extends React.Component {\r\n  /**\r\n   * Set default state of email, userpassword, fbid, emailError, passwwordError to \"\", \r\n   * Set fblogin emaillogin, loeading, wrongauth to false,\r\n   * Set exceedtry to 0\r\n   */\r\n  state = {\r\n    email: '',\r\n    userpassword: '',\r\n    fbid: '',\r\n    fblogin: false,\r\n    emaillogin: false,\r\n    loading: false,\r\n    wrongauth: false,\r\n    emailError: \"\",\r\n    passwordError: \"\",\r\n    exceedtry: 0\r\n  };\r\n\r\n  toggleCollapse = collapseID => () =>\r\n    this.setState(prevState => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\r\n    }));\r\n/**\r\n * handleChange\r\n * @param {*} e  \r\n */\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Validate\r\n   * @returns errorhandling if there is an error \r\n   */\r\n  validate = () => {\r\n    let emailError = \"\";\r\n    let passwordError = \"\";\r\n\r\n    if (this.state.email) {\r\n      if (!this.state.email.includes('@')) {\r\n        emailError = \"invalid email\";\r\n      }\r\n    }\r\n    else {\r\n      emailError = \"email cannot be empty\";\r\n    }\r\n\r\n    if (!this.state.userpassword) {\r\n      passwordError = \"password cannot be empty\";\r\n    }\r\n    if (emailError || passwordError) {\r\n      this.setState({ emailError, passwordError })\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * EmailLogin\r\n   */\r\n  EmailLogin = () => {\r\n    const post = {\r\n\r\n      email: this.state.email,\r\n      password: this.state.userpassword\r\n\r\n    }\r\n    const isValid = this.validate();\r\n    if (isValid) {\r\n      \r\n      this.setState({\r\n        loading: !this.state.loading,\r\n        emaillogin: true,\r\n        emailError: \"\",\r\n        passwordError: \"\"\r\n        \r\n      });\r\n      this.props.emailLogin(post);\r\n     \r\n    }\r\n  }\r\n  /**\r\n   * responseFacebook\r\n   * @param {*} response \r\n   */\r\n  responseFacebook = (response) => {\r\n    this.setState({\r\n      fbid: response.id,\r\n      fblogin: true\r\n    })\r\n    this.FbLogin(response.id)\r\n  }\r\n  /**\r\n   * FbLogin\r\n   * @param {*} id \r\n   */\r\n  FbLogin = (id) => {\r\n    const post = {\r\n      fbid: id\r\n    }\r\n    this.props.facebookLogin(post);\r\n  }\r\n  /**\r\n   * handleKeyPRess\r\n   * @param {*} event  \r\n   */\r\n  handleKeyPress = (event) => {\r\n    if (event.key === 'Enter')\r\n      this.EmailLogin()\r\n  }\r\n\r\n  /**\r\n   * componentWillReceiveProps\r\n   * @param {*} nextProps \r\n   * set localstorage of the following: studid, fbid, name, email, usertype, tutgrp, picture\r\n   * else errorhandling for wrong authentication\r\n   */\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.loginstatus.length !== 0) {\r\n      //Correct Authentication \r\n      localStorage.setItem(\"studid\", nextProps.loginstatus[0].id)\r\n      localStorage.setItem(\"fbid\", nextProps.loginstatus[0].fbid)\r\n      localStorage.setItem(\"name\", nextProps.loginstatus[0].name)\r\n      localStorage.setItem(\"email\", nextProps.loginstatus[0].email)\r\n      localStorage.setItem(\"usertype\", nextProps.loginstatus[0].usertype)\r\n      localStorage.setItem(\"tutgrp\", nextProps.loginstatus[0].tutgrp)\r\n      localStorage.setItem(\"picture\", nextProps.loginstatus[0].picture)\r\n      this.props.Navigate(\"/home\")\r\n    }\r\n    else {\r\n      //Wrong authentication\r\n      //This is used to manipulate the UI\r\n      this.setState({\r\n        loading: !this.state.loading,\r\n        userpassword: '',\r\n        email: '',\r\n        wrongauth: true,\r\n        exceedtry: this.state.exceedtry++\r\n      })\r\n      \r\n\r\n      if (this.state.exceedtry > 2){\r\n        \r\n      }\r\n      \r\n\r\n      // if (this.state.wrongauthcount >= 5) {\r\n      //   alert(\"Forgot your email or password? Please contact the admin.\");\r\n      // }\r\n\r\n      /**\r\n       * LoginForm\r\n       */\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { loading } = this.state;\r\n    const { wrongauth, exceedtry } = this.state;\r\n\r\n  \r\n    return (\r\n      <div id=\"classicformpage\">\r\n        <MDBView>\r\n          <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\r\n            <MDBContainer>\r\n              <MDBRow>\r\n                <MDBAnimation\r\n                  type=\"fadeInLeft\"\r\n                  delay=\".3s\"\r\n                  className=\"white-text text-center text-md-left col-md-6 mt-xl-5 mb-5\"\r\n                >\r\n                  <h1 className=\"h1-responsive font-weight-bold\">\r\n                    Sign up right now!\r\n                  </h1>\r\n                  <hr className=\"hr-light\" />\r\n                  <h6 className=\"mb-4\">\r\n                    Don't have an account? Register here!\r\n                  </h6>\r\n                  <MDBNavLink to='/register'>\r\n                    <MDBBtn outline color=\"white\">\r\n                      Register\r\n                  </MDBBtn>\r\n                  </MDBNavLink>\r\n                </MDBAnimation>\r\n\r\n                <MDBCol md=\"6\" xl=\"5\" className=\"mb-4\">\r\n                  <MDBAnimation type=\"fadeInRight\" delay=\".3s\">\r\n                    <MDBCard id=\"classic-card\">\r\n                      <MDBCardBody className=\"white-text\">\r\n                        <h3 className=\"text-center\">\r\n                          <MDBIcon icon=\"user\" /> Login:\r\n                        </h3>\r\n                        <hr className=\"hr-light\" />\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Enter Email\"\r\n                          icon=\"envelope\"\r\n                          id=\"email\"\r\n                          type=\"email\"\r\n                          value={this.state.email}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }} > {this.state.emailError} </div>\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Enter Password\"\r\n                          icon=\"lock\"\r\n                          type=\"password\"\r\n                          id=\"userpassword\"\r\n                          value={this.state.userpassword}\r\n                          onChange={this.handleChange}\r\n                          onKeyPress={this.handleKeyPress}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.passwordError}</div>\r\n                        <div className=\"text-center mt-4 black-text\">\r\n                          <MDBBtn color=\"white\" onClick={this.EmailLogin} disabled={loading}>\r\n                            {loading && <span>Logging in</span>}\r\n                            {!loading && <span>login</span>}\r\n                          </MDBBtn>\r\n                          <FacebookLogin\r\n                            appId=\"892789337958489\"\r\n                            fields=\"name,email,picture\"\r\n                            cssClass=\"btn btn-outline white\"\r\n                            callback={this.responseFacebook}\r\n                          />\r\n                          <hr className=\"hr-light\" />\r\n                          {exceedtry >1 && <h3 className=\"red-text\">Please Contact Admin</h3>}\r\n                          {wrongauth  && <h3 className=\"red-text\">Wrong username or password</h3>}\r\n                        </div>\r\n                      </MDBCardBody>\r\n                    </MDBCard>\r\n                  </MDBAnimation>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBContainer>\r\n          </MDBMask>\r\n        </MDBView>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  emailLogin: PropTypes.func.isRequired,\r\n  facebookLogin: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  loginstatus: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, { emailLogin, facebookLogin })(LoginForm);","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport GuestNavbar from '../components/share/GuestNavBar'\r\nimport LoginForm from '../components/loginpage/LoginForm'\r\n\r\n\r\n\r\nclass Login extends Component {\r\n    /**\r\n     * Navigate\r\n     * @param {*} val \r\n     */\r\n    Navigate = (val) => {\r\n        this.props.history.push(val)\r\n    }\r\n    componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * Login Page\r\n     * @returns Login Page\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GuestNavbar />\r\n                <LoginForm Navigate={this.Navigate} />\r\n                \r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Login","import React from \"react\";\r\nimport {\r\n  MDBMask,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBIcon,\r\n  MDBBtn,\r\n  MDBView,\r\n  MDBContainer,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBInput,\r\n  MDBAnimation,\r\n  MDBNavLink\r\n} from \"mdbreact\";\r\nimport \"../css/index.css\";\r\nimport FacebookLogin from 'react-facebook-login'\r\nimport PropTypes from 'prop-types'\r\nimport { registerUser, emailChecking } from '../../Redux/Actions/AuthAction'\r\nimport { connect } from 'react-redux'\r\n\r\nclass RegisterForm extends React.Component {\r\n  /**\r\n   * state \r\n   * set collapseId, email, password, cfmpassword, name, fbimage, fbid, nameError, emailError, passwordError, cfmPasswordError to \"\"\r\n   * set usertype to Student, tutgrp to TS1\r\n   * set fbdetails, loading to false\r\n   */\r\n  state = {\r\n    collapseID: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    cfmpassword: \"\",\r\n    usertype: \"Student\",\r\n    name: \"\",\r\n    fbimage: \"\",\r\n    fbid: \"\",\r\n    tutgrp: \"TS1\",\r\n    fbdetails: false,\r\n    loading: false,\r\n    nameError: \"\",\r\n    emailError: \"\",\r\n    passwordError: \"\",\r\n    cfmPasswordError: \"\",\r\n  };\r\n\r\n  toggleCollapse = collapseID => () =>\r\n    this.setState(prevState => ({\r\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\r\n    }));\r\n\r\n    /**\r\n     * responseFacebook\r\n     * @param {*} response \r\n     */\r\n  responseFacebook = (response) => {\r\n    console.log(response)\r\n    this.setState({\r\n      fbid: response.id,\r\n      fbimage: response.picture.data.url,\r\n      email: response.email,\r\n      name: response.name,\r\n      fbdetails: true\r\n    })\r\n  }\r\n  /**\r\n   * handleSelectList\r\n   * @param {*} e \r\n   */\r\n  handleSelectList = (e) => {\r\n    this.setState({\r\n      tutgrp: e.target.value\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Validate\r\n   * errorhandling\r\n   */\r\n  Validate = () => {\r\n    let nameError = \"\";\r\n    let emailError = \"\";\r\n    let passwordError = \"\";\r\n    let cfmPasswordError = \"\";\r\n    let isValid = true;\r\n\r\n    if (!this.state.name) {\r\n      nameError = \"name cannot be empty\";\r\n    }\r\n\r\n    if (this.state.email) {\r\n      if (!this.state.email.includes('@')) {\r\n        emailError = \"invalid email\";\r\n      }\r\n    }\r\n    else {\r\n      emailError = \"email cannot be empty\";\r\n    }\r\n\r\n    if (this.state.password) {\r\n      if (this.state.password != this.state.cfmpassword) {\r\n        cfmPasswordError = \"password fields do not tally\"\r\n      }\r\n    }\r\n    else{\r\n      passwordError = \"password cannot be empty\";\r\n    }\r\n\r\n    if (emailError || passwordError || nameError ||cfmPasswordError) {\r\n      this.setState({ emailError, passwordError, nameError ,cfmPasswordError })\r\n      isValid = false;\r\n    }\r\n    if (isValid) {\r\n      const emailForm = {\r\n        email: this.state.email\r\n      }\r\n      this.setState({\r\n        emailError: \"\",\r\n        passwordError: \"\",\r\n        nameError: \"\",\r\n        cfmPasswordError: \"\",\r\n      })\r\n      this.props.emailChecking(emailForm);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register\r\n   * create form for fbid, email, password, name, usertype, tutgrp \r\n   * set loading state to true\r\n   * navigate to homepage\r\n   */\r\n  Register = () => {\r\n    const form = {\r\n      fbid: this.state.fbid,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      name: this.state.name,\r\n      usertype: \"Student\",\r\n      tutgrp: this.state.tutgrp\r\n    }\r\n    this.setState({ loading: true });\r\n    this.props.registerUser(form);\r\n    this.props.Navigate('/')\r\n  }\r\n\r\n  /**\r\n   * componentDidupdate\r\n   * @param {*} prevProps \r\n   * @returns email use if the email has been used\r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.email === this.props.email)\r\n      return\r\n    else if (this.props.email.length === 0)\r\n      this.Register()\r\n    else if (this.props.email.length !== 0)\r\n      alert(\"Email used\")\r\n\r\n  }\r\n  /**\r\n   * handleChange\r\n   * @param {*} e \r\n   */\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n\r\n  /**\r\n   * RegisterForm\r\n   * @returns \r\n   */\r\n  render() {\r\n    const { loading } = this.state;\r\n    let fbimage = (!this.state.fbdetails) ? <React.Fragment /> : <center> <img width=\"150\" height=\"150\" src={this.state.fbimage} className=\"img-fluid z-depth-1 rounded-circle\" alt=\"\" /></center>\r\n    return (\r\n      <div id=\"classicformpage\">\r\n        <MDBView>\r\n          <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\r\n            <MDBContainer>\r\n              <MDBRow>\r\n                <MDBAnimation\r\n                  type=\"fadeInLeft\"\r\n                  delay=\".3s\"\r\n                  className=\"white-text text-center text-md-left col-md-6 mt-xl-5 mb-5\"\r\n                >\r\n                  <h1 className=\"h1-responsive font-weight-bold\">\r\n                    Thank you for joining us!\r\n                  </h1>\r\n                  <hr className=\"hr-light\" />\r\n                  <h6 className=\"mb-4\">\r\n                    Already have an account? Click the button below to go back\r\n                  </h6>\r\n                  <MDBNavLink to='/'>\r\n                    <MDBBtn outline color=\"white\">\r\n                      Login\r\n                  </MDBBtn>\r\n                  </MDBNavLink>\r\n                </MDBAnimation>\r\n\r\n                <MDBCol md=\"6\" xl=\"5\" className=\"mb-4\">\r\n                  <MDBAnimation type=\"fadeInRight\" delay=\".3s\">\r\n                    <MDBCard id=\"classic-card\">\r\n                      <MDBCardBody className=\"white-text\">\r\n                        <h3 className=\"text-center\">\r\n                          <MDBIcon icon=\"user\" /> Register:\r\n                        </h3>\r\n                        <hr className=\"hr-light\" />\r\n                        {fbimage}\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Enter Full Name\"\r\n                          icon=\"address-card\"\r\n                          id=\"name\"\r\n                          type=\"text\"\r\n                          value={this.state.name}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.nameError}</div>\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Enter Email\"\r\n                          icon=\"envelope\"\r\n                          id=\"email\"\r\n                          type=\"email\"\r\n                          value={this.state.email}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.emailError}</div>\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Enter Password\"\r\n                          icon=\"lock\"\r\n                          type=\"password\"\r\n                          id=\"password\"\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.passwordError}</div>\r\n                        <MDBInput\r\n                          className=\"white-text\"\r\n                          iconClass=\"white-text\"\r\n                          label=\"Confirm Password\"\r\n                          icon=\"lock\"\r\n                          type=\"password\"\r\n                          id=\"cfmpassword\"\r\n                          onChange={this.handleChange}\r\n                        />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.cfmPasswordError}</div>\r\n                        <select onChange={this.handleSelectList} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\r\n                          <option value={'TS1'}>TS1</option>\r\n                          <option value={'TS2'}>TS2</option>\r\n                          <option value={'TS3'}>TS3</option>\r\n                          <option value={'TS4'}>TS4</option>\r\n                        </select>\r\n                        <div className=\"text-center mt-4 black-text\">\r\n                          <MDBBtn onClick={this.Validate} color=\"white\" disabled={loading} >\r\n                            {loading && <span>Registering</span>}\r\n                            {!loading && <span>Register</span>}\r\n                          </MDBBtn>\r\n                          <FacebookLogin\r\n                            appId=\"892789337958489\"\r\n                            fields=\"name,email,picture\"\r\n                            cssClass=\"btn btn-outline white\"\r\n                            textButton=\"Facebook Register\"\r\n                            callback={this.responseFacebook}\r\n                          />\r\n                        </div>\r\n                      </MDBCardBody>\r\n                    </MDBCard>\r\n                  </MDBAnimation>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBContainer>\r\n          </MDBMask>\r\n        </MDBView>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegisterForm.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  emailChecking: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  registerstatus: state.auth.status,\r\n  email: state.auth.emailcheck\r\n});\r\n\r\nexport default connect(mapStateToProps, { registerUser, emailChecking })(RegisterForm);","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport GuestNavbar from '../components/share/GuestNavBar'\r\nimport RegisterForm from '../components/registerpage/RegisterForm'\r\n\r\nclass Register extends Component {\r\n    /**\r\n     * Navigate\r\n     * @param {*} val \r\n     */\r\n    Navigate = (val) => {\r\n        this.props.history.push(val)\r\n    }\r\n    /**\r\n     * Register page\r\n     * @returns Register page\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GuestNavbar />\r\n                <RegisterForm Navigate={this.Navigate} />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Register","import React, { Component } from 'react';\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBLink } from 'mdbreact';\r\n\r\nclass TutorialTable extends Component {\r\n\r\n  /**\r\n   * state\r\n   * set default loading = false\r\n   */\r\n  state = {\r\n    loading: false\r\n  }\r\n  /**\r\n   * onDelete\r\n   * @param {*} tutid upon click, remove the tutid\r\n   */\r\n  onDelete = (tutid) => {\r\n    this.setState({ loading: !this.state.loading })\r\n    this.props.deleteTut(tutid);\r\n  }\r\n\r\n  /**\r\n   * View Tutorial\r\n   * @param {*} tutid upon click bring you to question page\r\n   */\r\n  ViewTutorial = (tutid) => {\r\n    this.props.navigate(tutid)\r\n  }\r\n\r\n  /**\r\n   * componentDidUpdate \r\n   * @param {*} prevProps if there is changes in tutorial, set loading = false \r\n   */\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.tutorial !== this.props.tutorial) {\r\n      this.setState({ loading: false })\r\n    }\r\n  }\r\n  /**\r\n   * creation of new assignment\r\n   * @returns assignment name and tutorial grouping\r\n   */\r\n  render() {\r\n    return (\r\n      <MDBTable striped>\r\n        <MDBTableHead>\r\n          <tr>\r\n            <th>Assignment Name</th>\r\n            <th>Tutorial Group</th>\r\n            <th>Created by</th>\r\n            <th>Remove</th>\r\n            <th>View</th>\r\n          </tr>\r\n        </MDBTableHead>\r\n        <MDBTableBody>\r\n          {this.props.tutorial && this.props.tutorial.map(x => {\r\n            return (\r\n              <tr key={x.tutid}>\r\n                <td>{x.tutname}</td>\r\n                <td>{x.tutgrp}</td>\r\n                <td>{x.createdby}</td>\r\n                {(!this.state.loading) ? <td><MDBBtn size=\"sm\" color=\"red\" onClick={() => this.onDelete(x.tutid)}>Remove</MDBBtn></td> : <td><MDBBtn size=\"sm\" color=\"red\" disabled>Removing</MDBBtn></td>}\r\n                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => this.ViewTutorial(x.tutid)} > View </MDBBtn>\r\n                </td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </MDBTableBody>\r\n      </MDBTable>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TutorialTable;","/**\r\n * Fetch addTutorial\r\n * @param {*} postData \r\n * @returns \r\n */\r\n\r\nexport const addTutorial = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/add/tutorial', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'ADD_TUTORIAL',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch deleteTutorial\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const deleteTutorial = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/delete/tutorial', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'DELETE_TUTORIAL',\r\n            payload: data,\r\n            tutid: postData.tutid\r\n        })\r\n        );\r\n}\r\n\r\n/**\r\n * Fetch showTutorials\r\n * @returns \r\n */\r\nexport const showTutorials = () => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/tutlist')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_TUTORIAL',\r\n            payload: data\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch showUserTutorial\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const showUserTutorial = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/user/tutlist', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_USER_TUTORIAL',\r\n            payload: data,\r\n        })\r\n        );\r\n}\r\n/**\r\n * Fetch showProfTutorial\r\n * @param {*} postData \r\n * @returns \r\n */\r\nexport const showProfTutorial = (postData) => dispatch => {\r\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/prof/tutlist', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: 'FETCH_PROF_TUTORIAL',\r\n            payload: data,\r\n        })\r\n        );\r\n}","import React, { Component } from 'react'\r\nimport { MDBInput, MDBBtn } from 'mdbreact';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { addTutorial } from '../../Redux/Actions/TutorialAction'\r\n\r\nclass AddTutorial extends Component {\r\n\r\n  /**\r\n   * state\r\n   * Get tutgrp, name and usertype\r\n   * \r\n   */\r\n    state = {\r\n        tutGroup: localStorage.getItem(\"tutgrp\"),\r\n        tutName: '',\r\n        createdby: localStorage.getItem(\"name\"),\r\n        coins: 50,\r\n        loading: false,\r\n        userType: localStorage.getItem(\"usertype\"),\r\n        nameError: \"\"\r\n    }\r\n/**\r\n * Validate if the string is empty\r\n * @returns false\r\n */\r\n    validate = () => {\r\n        let nameError = \"\";\r\n        if (!this.state.tutName) {\r\n            nameError = \"Assignment name cannot be empty\";\r\n            this.setState({nameError})\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Submit \r\n     */\r\n    onSubmit = () => {\r\n        const post = {\r\n            tutname: this.state.tutName,\r\n            tutgrp: this.state.tutGroup,\r\n            createdby: this.state.createdby,\r\n            difficulty: this.state.difficulty,\r\n            coins: this.state.coins,\r\n\r\n        }\r\n        const isValid = this.validate();\r\n        if (isValid) {\r\n            this.setState({\r\n                loading: !this.state.loading,\r\n                tutName: \"\",\r\n                nameError:\"\"\r\n            })\r\n            this.props.addTut(post);\r\n        }\r\n    }\r\n\r\n/**\r\n * handlceChange\r\n * @param {*} e handle all the changes that were received\r\n */\r\n    handleChange = (e) => { //to handle change in inputs\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n        })\r\n    }\r\n\r\n   /**\r\n    * getValue\r\n    * @param {*} e  handle all the changes when the number of coins is amended\r\n    */\r\n    getValue = (e) => {\r\n        this.setState({\r\n            coins: e.target.value\r\n        })\r\n    }\r\n\r\n    /**\r\n     * handleSelectList\r\n     * @param {*} e  handle selection list\r\n     */\r\n    handleSelectList = (e) => {\r\n        this.setState({ difficulty: e.target.value })\r\n    }\r\n    /**\r\n     * handleTutList\r\n     * @param {*} e handle the tut list\r\n     */\r\n    handleTutList = (e) => {\r\n        this.setState({ tutGroup: e.target.value })\r\n    }\r\n\r\n    /**\r\n     * ComponentDidupdate\r\n     * @param {*} prevProps to check if there is any update from the previous props\r\n     */\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.tutGroup !== this.props.tutGroup) {\r\n            this.setState({ loading: false })\r\n        }\r\n    }\r\n/**\r\n * Display all the assingment lists that are created\r\n * @returns \r\n */\r\n    render() {\r\n        const { loading } = this.state;\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <div className=\"black-text\">\r\n                        <MDBInput value={this.state.tutName} label=\"Enter Assignment Name\" id='tutName' onChange={this.handleChange} icon=\"user-plus\" group type=\"text\" validate error=\"wrong\"\r\n                            success=\"right\" />\r\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.nameError}</div>\r\n                        {(this.state.userType === \"Professor\") &&\r\n                            <React.Fragment>\r\n                                <label htmlFor=\"difficulty\">Select Tutorial Group</label>\r\n                                <select onChange={this.handleTutList} value={this.state.tutGroup} id=\"tutGroup\" className=\"browser-default custom-select\">\r\n                                    <option value={'TS1'}>TS1</option>\r\n                                    <option value={'TS2'}>TS2</option>\r\n                                    <option value={'TS3'}>TS3</option>\r\n                                    <option value={'TS4'}>TS4</option>\r\n                                </select>\r\n                            </React.Fragment>}\r\n                    </div>\r\n                    <label htmlFor=\"coins\">Number of coins: {this.state.coins}</label>\r\n                    <input type=\"range\" id=\"coins\" onChange={this.getValue} min=\"0\" max=\"100\" className=\"custom-range\" />\r\n                    <div className=\"text-center\">\r\n                        <MDBBtn onClick={this.onSubmit} color=\"blue\" disabled={loading} >\r\n                            {loading && <span>Submitting</span>}\r\n                            {!loading && <span>Submit</span>}</MDBBtn>\r\n                        <MDBBtn color=\"red\" onClick={this.props.onBack}> Back\r\n                       </MDBBtn>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    tutGroup: state.tutorial.tutorialgrp\r\n});\r\n\r\nexport default connect(mapStateToProps, { addTutorial })(AddTutorial) //to be changed","\r\nimport React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBAnimation } from \"mdbreact\";\r\nimport TutorialTable from '../components/assignmentpage/TutorialTable'\r\nimport AddTutorial from '../components/assignmentpage/AddTutorial'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { showTutorials, deleteTutorial, addTutorial, showProfTutorial } from '../Redux/Actions/TutorialAction'\r\nimport Navbar from '../components/share/Navbar';\r\nimport Footer from '../components/share/Footer';\r\n\r\nclass Assignment extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to localstorage tutgrp\r\n     * set name to localstorage name\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        name: localStorage.getItem(\"name\"),\r\n    }\r\n    componentDidMount() {\r\n        //this.props.showAllTutorials();\r\n        this.GetTutorials()\r\n    }\r\n    /**\r\n     * GetTutorials\r\n     * set a const form tut grp and name\r\n     */\r\n    GetTutorials = () => {\r\n        const form = {\r\n            tutgrp: this.state.tutgrp,\r\n            name: this.state.name\r\n        }\r\n        this.props.showProfTutorial(form);\r\n        \r\n    }\r\n    /**\r\n     * Navigate\r\n     * @param {*} tutid navigate to questions page \r\n     */\r\n    Navigate = (tutid) => {\r\n        this.props.history.push('/question/' + tutid)\r\n    }\r\n\r\n    /**\r\n     * DelTutorial\r\n     * @param {*} tutid Deletion of tutorial\r\n     */\r\n    DelTutorial = (tutid) => {\r\n        const form = {\r\n            tutid: tutid\r\n        }\r\n        this.props.deleteTutorial(form)\r\n    }\r\n    /**\r\n     * NotLoggedIn \r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * AddTutorial\r\n     * @param {*} form \r\n     */\r\n    AddTutorial = (form) => {\r\n        //Submit data to my api\r\n        this.props.addTutorial(form);\r\n    }\r\n    /**\r\n     * Onback\r\n     */\r\n    OnBack = () => {\r\n        this.props.history.push('/home')\r\n    }\r\n    /**\r\n     * Assignment page\r\n     * @returns Assignemnt page\r\n     */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <br />\r\n                    \r\n                        <MDBRow >\r\n                            <MDBCol>\r\n                            <MDBAnimation type=\"slideInDown\" >\r\n                                <h2>Assignment List</h2>\r\n                                <hr />\r\n                                <TutorialTable deleteTut={this.DelTutorial} navigate={this.Navigate} tutorial={this.props.tutorialtable} />\r\n                                </MDBAnimation>\r\n                                <MDBAnimation type=\"slideInUp\">\r\n                                <br />\r\n                                <h3>Assignment Creation</h3>\r\n                                <hr />\r\n                                <AddTutorial addTut={this.AddTutorial} onBack={this.OnBack} />\r\n                                </MDBAnimation>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    \r\n                </MDBContainer>\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nAssignment.propTypes = {\r\n    showTutorials: PropTypes.func.isRequired,\r\n    deleteTutorial: PropTypes.func.isRequired,\r\n    addTutorial: PropTypes.func.isRequired,\r\n    showProfTutorial: PropTypes.func.isRequired\r\n}\r\n\r\n//This is from the Reducers\r\n//state.Rootreducer.TutorialReducers\r\nconst mapStateToProps = state => ({\r\n    tutorialtable: state.tutorial.tutorialgrp,\r\n});\r\n\r\n// connection this component to database.\r\nexport default connect(mapStateToProps, { showProfTutorial, showTutorials, deleteTutorial, addTutorial })(Assignment)","import React, { Component } from 'react'\r\n\r\nexport default class Logout extends Component {\r\n    componentDidMount(){\r\n        localStorage.clear()\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    /**\r\n     * Logout page\r\n     * @returns Logout page\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\nconst StudentInfo = ({ student }) => {\r\n  /**\r\n   * Studentinfo\r\n   */\r\n  return (\r\n    <div>\r\n      {student && student.map(x => {\r\n        return (\r\n          <MDBCard key={x.id} style={{ width: \"22rem\" }}>\r\n            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\r\n            <MDBCardBody>\r\n              <MDBCardTitle>{x.name}</MDBCardTitle>\r\n              <MDBCardText>\r\n                Email: {x.email} <br />\r\n                Tutorial Group: {x.tutgrp}\r\n              </MDBCardText>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentInfo;","import React from \"react\";\r\nimport { MDBInput, MDBBtn } from 'mdbreact';\r\n\r\nconst MarkScoreComment = ({ record, inputChange, markComplete, goBack, scoreError, commentError }) => {\r\n  /**\r\n   * MarkScoreComment\r\n   */\r\n  return (\r\n    <div>\r\n      {record.map(x => {\r\n        return (\r\n          <form key={x.id}>\r\n            <div className=\"grey-text\">\r\n              <MDBInput label=\"Score\" placeholder=\"Enter Score\" id=\"score\" onChange={inputChange} className=\"w-100\" icon=\"star\" group type=\"email\" validate error=\"wrong\"\r\n                success=\"right\" />\r\n              <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {console.log(scoreError)}</div>\r\n              <MDBInput label=\"Comment\" placeholder=\"Enter Comments\" id=\"comment\" onChange={inputChange} className=\"w-100\" icon=\"comment\" group type=\"email\" validate error=\"wrong\"\r\n                success=\"right\" />\r\n              <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {commentError}</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <MDBBtn color=\"blue\" onClick={markComplete}>Submit</MDBBtn>\r\n              <MDBBtn color=\"red\" onClick={goBack} > Back</MDBBtn>\r\n            </div>\r\n\r\n          </form>\r\n        )\r\n      })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MarkScoreComment;","import React from 'react';\r\n\r\nimport { MDBRow, MDBCol, MDBContainer } from \"mdbreact\";\r\n\r\nconst MarkPicture = ({ record }) => {\r\n  /**\r\n   * MarkPicture\r\n   */\r\n  return (\r\n    <div>\r\n      {record.map(x => {\r\n        return (\r\n          <MDBRow key={x.id}>\r\n            <MDBCol md=\"12\" className=\"mb-3\">\r\n              <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\r\n            </MDBCol>\r\n          </MDBRow>\r\n        )\r\n      })\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default MarkPicture;","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\";\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\nimport { getStudentSubmission, updateScores } from '../Redux/Actions/GameActions'\r\nimport { showTutorialQuestion } from '../Redux/Actions/QuestActions'\r\nimport { getStudentInfo } from '../Redux/Actions/AuthAction'\r\nimport StudentInfo from '../components/marking/StudentInfo';\r\nimport MarkDropDown from '../components/marking/MarkDropDown';\r\nimport MarkScoreComment from '../components/marking/MarkScoreComment';\r\nimport MarkPicture from '../components/marking/MarkPicture'\r\nimport Navbar from '../components/share/Navbar';\r\nimport Footer from '../components/share/Footer';\r\n\r\n\r\nclass Marking extends Component {\r\n    /**\r\n     * state \r\n     * submissionid : id\r\n     * studid : studid\r\n     * set tutid to local storage selectedtutid\r\n     * set score, comment, scoreError, commentError to \"\"\r\n     */\r\n    state = {\r\n        submissionid: this.props.match.params.id,\r\n        tutid: localStorage.getItem(\"selectedtutid\"),\r\n        studid: this.props.match.params.studid,\r\n        score: '',\r\n        comment: '',\r\n        scoreError:\"\",\r\n        commentError:\"\"\r\n    }\r\n    componentDidMount() {\r\n        this.getStudentDetails();\r\n        this.getSubmission();\r\n        this.getTutorialQuestions();\r\n    }\r\n    /**\r\n     * NotloggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * getSubmssion\r\n     */\r\n    getSubmission() {\r\n        const form = {\r\n            id: this.state.submissionid,\r\n        }\r\n        this.props.getStudentSubmission(form)\r\n    }\r\n    /**\r\n     * getTutorialQuestions\r\n     */\r\n    getTutorialQuestions() {\r\n        const form = {\r\n            tutid: this.state.tutid\r\n        }\r\n        this.props.showTutorialQuestion(form)\r\n    }\r\n\r\n    /**\r\n     * getStudentDetails\r\n     */\r\n    getStudentDetails() {\r\n        const form = {\r\n            id: this.state.studid\r\n        }\r\n        this.props.getStudentInfo(form)\r\n    }\r\n\r\n    /**\r\n     * handleChange\r\n     * @param {*} e \r\n     */\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Validate\r\n     * @returns errorhandling when field is empty \r\n     */\r\n    validate = () => {\r\n        let scoreError= \"\";\r\n        let commentError = \"\";\r\n\r\n        if (!this.state.score){\r\n            scoreError= \"Score cannot be empty\";\r\n        }\r\n        else{\r\n            if (!Number(this.state.score)){\r\n                scoreError = \"Score must be a numerical value\";\r\n            }\r\n        }\r\n        if (!this.state.comment){\r\n            commentError= \"Comment cannot be empty\";\r\n        }\r\n        if (commentError || scoreError){\r\n            this.setState({commentError,scoreError});\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * MarkingComplete\r\n     */\r\n    MarkingComplete = () => {\r\n        const form = {\r\n            id: this.state.submissionid,\r\n            score: this.state.score,\r\n            comment: this.state.comment\r\n        }\r\n        const isValid = this.validate();\r\n        console.log(isValid, this.state.commentError,this.state.scoreError);\r\n        if (isValid){\r\n            this.setState({scoreError: \"\",commentError: \"\"})\r\n            this.props.updateScores(form)\r\n            this.props.history.push(\"/seltut\")\r\n        }        \r\n    }\r\n/**\r\n * GoBack\r\n */\r\n    GoBack = () => {\r\n        this.props.history.push(\"/seltut\")\r\n    }\r\n    /**\r\n     * Marking page\r\n     * @returns Marking page\r\n     */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <br />\r\n\r\n                    <MDBAnimation type=\"slideInDown\">\r\n                        <MDBRow>\r\n                            <MDBCol size=\"6\">\r\n                                <h2>Student Details</h2>\r\n                                <hr />\r\n                                <StudentInfo student={this.props.student} />\r\n                            </MDBCol>\r\n                            <MDBCol size=\"6\">\r\n                                <h2>Student's Answer</h2>\r\n                                <hr />\r\n                                <MarkPicture record={this.props.record} />\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n\r\n                    <MDBAnimation type=\"slideInUp\">\r\n                        <MDBRow>\r\n                            <MDBCol size=\"12\">\r\n                                <br />\r\n                                <h2>Marking</h2>\r\n                                <hr/>\r\n                                <MarkScoreComment scoreError = {this.state.scoreError} commentError = {this.state.commentError} markComplete={this.MarkingComplete} goBack={this.GoBack} inputChange={this.handleChange} record={this.props.record} />\r\n                                \r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n\r\n                </MDBContainer>\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nMarking.Proptypes = {\r\n    getStudentSubmission: Proptypes.func.isRequired,\r\n    showTutorialQuestion: Proptypes.func.isRequired,\r\n    getStudentInfo: Proptypes.func.isRequired,\r\n    updateScores: Proptypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    record: state.game.submission,\r\n    questionlist: state.quest.questions,\r\n    student: state.auth.studentinfo,\r\n    scores: state.game.status\r\n})\r\nexport default connect(mapStateToProps, { getStudentSubmission, showTutorialQuestion, getStudentInfo, updateScores })(Marking)","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBContainer, MDBRow, MDBCol, MDBAnimation } from 'mdbreact';\r\nimport { showTutorials, showUserTutorial } from '../Redux/Actions/TutorialAction'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport Navbar from '../components/share/Navbar';\r\nimport Footer from '../components/share/Footer';\r\n\r\nclass MarkingHome extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\")\r\n    }\r\n    componentDidMount() {\r\n        //this.props.showAllTutorials();\r\n        this.GetTutorials()\r\n    }\r\n    /**\r\n     * getTutorials\r\n     */\r\n    GetTutorials = () => {\r\n        const form = {\r\n            tutgrp: this.state.tutgrp\r\n        }\r\n        this.props.showUserTutorial(form);\r\n    }\r\n/**\r\n * GoBack\r\n */\r\n    GoBack = () => { this.props.history.push('/home') }\r\n/**\r\n * NotLoggedIn\r\n */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n\r\n    /**\r\n     * ViewTutorial\r\n     * @param {*} tutid \r\n     */\r\n    ViewTutorial = (tutid) => {\r\n        var tutgrp = this.props.tutorialtable.filter(x => x.tutid == tutid).map(z => z.tutgrp)\r\n        localStorage.setItem(\"seltutgrp\", tutgrp)\r\n        localStorage.setItem(\"selectedtutid\", tutid)\r\n        this.props.history.push('/student/' + tutid)\r\n    }\r\n\r\n    /**\r\n     * MarkingHome page\r\n     * @returns MarkingHome page\r\n     */\r\n    render() {\r\n        let tutorialgrp = this.props.tutorialtable.map(x => {\r\n            return (\r\n                <tr key={x.tutid}>\r\n                    <td>{x.tutname}</td>\r\n                    <td>{x.tutgrp}</td>\r\n                    <td>{x.createdby}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.ViewTutorial(x.tutid)}> Select </MDBBtn></td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <br />\r\n                    <MDBAnimation type=\"slideInUp\">\r\n                        <MDBRow>\r\n                            <MDBCol size=\"12\">\r\n                                <h2>Select Assignment to Mark</h2>\r\n                                <hr />\r\n                                <MDBTable striped>\r\n                                    <MDBTableHead>\r\n                                        <tr>\r\n                                            <th>Assignment Name</th>\r\n                                            <th>Tutorial Group</th>\r\n                                            <th>Created by</th>\r\n                                            <th>Select</th>\r\n                                        </tr>\r\n                                    </MDBTableHead>\r\n                                    <MDBTableBody>\r\n                                        {tutorialgrp}\r\n                                    </MDBTableBody>\r\n                                </MDBTable>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\r\n                       </MDBBtn>\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nMarkingHome.propTypes = {\r\n    showTutorials: PropTypes.func.isRequired,\r\n    showUserTutorial: PropTypes.func.isRequired\r\n}\r\n\r\n//This is from the Reducers\r\n//state.Rootreducer.TutorialReducers\r\nconst mapStateToProps = state => ({\r\n    tutorialtable: state.tutorial.tutorialgrp,\r\n});\r\n\r\nexport default connect(mapStateToProps, { showTutorials, showUserTutorial })(MarkingHome)","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBContainer, MDBRow, MDBCol, MDBAnimation } from 'mdbreact';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { getStudents } from '../Redux/Actions/GameActions'\r\nimport Navbar from '../components/share/Navbar';\r\nimport Footer from '../components/share/Footer';\r\n\r\nclass StudentSelect extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage selTutgrp\r\n     * tutod : tutid\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"seltutgrp\"),\r\n        tutid: this.props.match.params.tutid\r\n    }\r\n    componentDidMount() {\r\n        this.getStudents()\r\n    }\r\n    /**\r\n     * getStudents\r\n     */\r\n    getStudents() {\r\n        const form = {\r\n            tutid: this.state.tutid\r\n        }\r\n        this.props.getStudents(form)\r\n    }\r\n    /**\r\n     * ViewDetails\r\n     * @param {*} submissionid \r\n     * @param {*} studid \r\n     */\r\n    ViewDetails = (submissionid, studid) => {\r\n        this.props.history.push('/marking/' + submissionid + \"/\" + studid)\r\n    }\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => { this.props.history.push('/seltut') }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * StudentSelect page\r\n     * @returns StudentSelect page\r\n     */\r\n    render() {\r\n        let studentlist = this.props.students.map(x => {\r\n            return (\r\n                <tr key={x.id}>\r\n                    <td>{x.name}</td>\r\n                    <td>{x.date}</td>\r\n                    <td>{x.tutgrp}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.ViewDetails(x.id, x.studid)}> Select </MDBBtn></td>\r\n                </tr>\r\n            );\r\n        })\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <br />\r\n                    <MDBAnimation type=\"slideInDown\" >\r\n                        <MDBRow>\r\n                            <MDBCol size=\"12\">\r\n                                <h2>Select Student to Mark from Group: {this.state.tutgrp}</h2>\r\n                                <hr />\r\n                                <MDBTable striped>\r\n                                    <MDBTableHead>\r\n                                        <tr>\r\n                                            <th>Student Name</th>\r\n                                            <th>Date Submitted</th>\r\n                                            <th>Tutorial Group</th>\r\n                                            <th>Select</th>\r\n                                        </tr>\r\n                                    </MDBTableHead>\r\n                                    <MDBTableBody>\r\n                                        {studentlist}\r\n                                    </MDBTableBody>\r\n                                </MDBTable>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\r\n                       </MDBBtn>\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nStudentSelect.propTypes = {\r\n    getStudents: PropTypes.func.isRequired,\r\n}\r\n\r\n//This is from the Reducers\r\n//state.Rootreducer.TutorialReducers\r\nconst mapStateToProps = state => ({\r\n    students: state.game.studentlist,\r\n});\r\nexport default connect(mapStateToProps, { getStudents })(StudentSelect)","import React, { Component } from 'react';\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\nclass StudentSubmit extends Component {\r\n  /**\r\n   * onselect\r\n   * @param {*} ldrid \r\n   */\r\n  onSelect = (ldrid) => {\r\n    this.props.selectSubmission(ldrid)\r\n  }\r\n\r\n  /**\r\n   * StudentSubmit\r\n   * @returns StudentSubmit\r\n   */\r\n  render() {\r\n    return (\r\n      <MDBTable>\r\n        <MDBTableHead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Tutorial Name</th>\r\n            <th>Date</th>\r\n            <th>Score</th>\r\n            <th>View</th>\r\n          </tr>\r\n        </MDBTableHead>\r\n        <MDBTableBody>\r\n          {this.props.mycompletedtask && this.props.mycompletedtask.map(x => {\r\n            return (\r\n              <tr key={x.studid}>\r\n                <td>{x.name}</td>\r\n                <td>{x.tutname}</td>\r\n                <td>{x.date}</td>\r\n                <td>{x.score}</td>\r\n                <td><MDBBtn color=\"green\" onClick={() => this.onSelect(x.id)} size=\"sm\">View</MDBBtn></td>\r\n              </tr>\r\n            )\r\n          })}\r\n        </MDBTableBody>\r\n      </MDBTable>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StudentSubmit;","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation } from \"mdbreact\"\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\r\nimport { fetchLeaderboard, myCompletedTutorial } from '../Redux/Actions/GameActions'\r\nimport LeaderBoard from '../components/homepage/LeaderBoard'\r\nimport StudentSubmit from '../components/studentmainpage/StudentSubmit'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\n\r\n\r\nclass StudentMain extends Component {\r\n    /**\r\n     * state\r\n     * set studid to local storage studid\r\n     * get tutgrp to local storage tutgrp\r\n     */\r\n    state = {\r\n        studid: localStorage.getItem(\"studid\"),\r\n        tutgrp: localStorage.getItem(\"tutgrp\")\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchLeaderboard();\r\n        this.props.fetchPosts();\r\n        this.getStudentSubmission()\r\n    }\r\n    /**\r\n     * getStudentSubmission\r\n     */\r\n    getStudentSubmission() {\r\n        const form = {\r\n            studid: this.state.studid\r\n        }\r\n        this.props.myCompletedTutorial(form);\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * ViewMySubmission\r\n     * @param {*} ldrid \r\n     */\r\n    viewMySubmission = (ldrid) => {\r\n        this.props.history.push('/submission/' + ldrid)\r\n    }\r\n    /**\r\n     * StudentMain Page\r\n     * @returns StudentMain page\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n\r\n                <MDBContainer>\r\n                    <MDBAnimation type=\"slideInDown\" count={1}>\r\n                        <br />\r\n                        <h2>LeaderBoard</h2>\r\n                        <hr />\r\n                        {this.props.leaderboard && <LeaderBoard leaderboard={this.props.leaderboard} tutgrp={this.state.tutgrp} />}\r\n                    </MDBAnimation>\r\n                    <MDBAnimation type=\"slideInUp\" count={1}>\r\n                        <br />\r\n\r\n                        <h2>Personal Submission</h2>\r\n                        <StudentSubmit selectSubmission={this.viewMySubmission} mycompletedtask={this.props.mycompletedtask} />\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nStudentMain.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    fetchLeaderboard: PropTypes.func.isRequired,\r\n    myCompletedTutorial: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    twitter: state.twitter.items,\r\n    leaderboard: state.game.records,\r\n    mycompletedtask: state.game.completedtut\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts, fetchLeaderboard, myCompletedTutorial })(StudentMain)\r\n","import React, { Component } from 'react'\r\nimport { MDBInputGroup, MDBBtn } from 'mdbreact';\r\n\r\nexport default class Uploadfile extends Component {\r\n/**\r\n * state\r\n */\r\n    state = {\r\n        form: {\r\n            file: []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * onChangeHandlefile\r\n     * @param {*} e \r\n     */\r\n    onChangeHandleFile = (e) => {\r\n        console.log(e.target.files[0])\r\n        var file = e.target.files[0];\r\n        var reader = new FileReader();\r\n\r\n        reader.readAsDataURL(file);\r\n        reader.addEventListener(\"load\", () => {\r\n                this.setState(state => ({\r\n                    ...state,\r\n                    form: {\r\n                        file: [reader.result]\r\n                    }\r\n                }));\r\n                const url = reader.result;\r\n                //console.log(\"#####\", url);\r\n                //Call Parent Component Method\r\n                this.props.picUpload(url)\r\n            },\r\n            false\r\n        );\r\n    };\r\n\r\n/**\r\n * uploadfile\r\n * @returns uploadfile\r\n */\r\n    render() {\r\n        return (\r\n            <MDBInputGroup id='file'\r\n                inputs={\r\n                    <div className=\"custom-file\">\r\n                        <input onChange={this.onChangeHandleFile}\r\n                            type=\"file\"\r\n                            className=\"custom-file-input\"\r\n                            id=\"inputGroupFile01\"\r\n                        />\r\n                        <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\r\n                            Choose file\r\n                        </label>\r\n                    </div>\r\n                }\r\n                containerClassName=\"mb-3\"\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\nconst StudentProfileCard = ({ studname, profilepic, studemail, studtutgrp }) => {\r\n  /**\r\n   * StudentProfileCard\r\n   */\r\n  return (\r\n    <div>\r\n      <MDBCard style={{ width: \"22rem\" }}>\r\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{studname}</MDBCardTitle>\r\n          <MDBCardText>\r\n            Email: {studemail} <br />\r\n                Tutorial Group: {studtutgrp}\r\n          </MDBCardText>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentProfileCard;","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation } from \"mdbreact\"\r\nimport Uploadfile from '../components/share/Uploadfile'\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\nimport { getStudentInfo, updateProfile, facebookAccountLink } from '../Redux/Actions/AuthAction'\r\nimport { showTutorials } from '../Redux/Actions/TutorialAction'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport FacebookLogin from 'react-facebook-login'\r\nimport StudentProfileCard from '../components/studentprofile/StudentProfileCard'\r\n\r\nclass StudentProfile extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     * set studid to local storage studid\r\n     * set email to local storage email\r\n     * set picture to local storage picture\r\n     * set name to local storage name\r\n     * set fbid to local storage fbid\r\n     * set fbDisplay to false\r\n     * set emailError to \"\"\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        studid: localStorage.getItem(\"studid\"),\r\n        email: localStorage.getItem(\"email\"),\r\n        picture: localStorage.getItem(\"picture\"),\r\n        name: localStorage.getItem(\"name\"),\r\n        fbid: localStorage.getItem(\"fbid\"),\r\n        fbDisplay: false,\r\n        emailError:\"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.fbid == '') {\r\n            this.setState({ fbDisplay: true })\r\n        }\r\n        this.getStudentDetails();\r\n        this.props.showTutorials();\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * getStudentDetails\r\n     */\r\n    getStudentDetails() {\r\n        const form = {\r\n            id: this.state.studid\r\n        }\r\n        this.props.getStudentInfo(form)\r\n    }\r\n\r\n    /**\r\n     * onChoose\r\n     * @param {*} e \r\n     */\r\n    onChoose = (e) => {\r\n        this.setState({\r\n            tutgrp: e.target.value\r\n        });\r\n    }\r\n    /**\r\n     * validate\r\n     * @returns error handling \r\n     */\r\n    validate = () =>{\r\n        let emailError = \"\";\r\n        if (!this.state.email){\r\n            emailError= \"Email cannot be empty\";\r\n            this.setState({emailError});\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * onSubmitAll\r\n     */\r\n    onSubmitAll = () => {\r\n        const form = {\r\n            id: this.state.studid,\r\n            name: this.state.name,\r\n            fbid: this.state.fbid,\r\n            email: this.state.email,\r\n            picture: this.state.picture,\r\n            tutgrp: this.state.tutgrp\r\n        }\r\n        const isValid = this.validate();\r\n\r\n        if (isValid) {\r\n            this.setState({emailError:\"\"})\r\n            this.props.updateProfile(form);\r\n            localStorage.setItem(\"picture\", this.state.picture)\r\n            localStorage.setItem(\"tutgrp\", this.state.tutgrp)\r\n            localStorage.setItem(\"email\", this.state.email)\r\n            localStorage.setItem(\"name\", this.state.name)\r\n            localStorage.setItem(\"fbid\", this.state.fbid)\r\n            this.props.history.push(\"/home\")\r\n        }\r\n    }\r\n    /**\r\n     * handleChange\r\n     * @param {*} e \r\n     */\r\n    handleChange = (e) => { // to change state everytime you type -- question: value\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n        })\r\n    }\r\n    /**\r\n     * PictureUpload\r\n     * @param {*} pic \r\n     */\r\n    PictureUploaded = (pic) => {\r\n        console.log(pic)\r\n        this.setState({ picture: pic });\r\n    }\r\n    /**\r\n     * responseFacebook\r\n     * @param {*} response \r\n     */\r\n    responseFacebook = (response) => {\r\n        this.setState({\r\n            fbid: response.id,\r\n            fblogin: true\r\n        })\r\n        this.FbLink(response.id)\r\n    }\r\n    /**\r\n     * FbLink\r\n     * @param {*} id \r\n     */\r\n    FbLink = (id) => {\r\n        this.setState({\r\n            fbid: id,\r\n            fbDisplay: false\r\n        })\r\n        localStorage.setItem(\"fbid\", this.state.fbid)\r\n        const form = {\r\n            id: this.state.studid,\r\n            fbid: this.state.fbid\r\n        }\r\n        this.props.facebookAccountLink(form)\r\n    }\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => { this.props.history.push('/studentmain') }\r\n\r\n    /**\r\n     * Student Profile page\r\n     * @returns Student Profile page\r\n     */\r\n    render() {\r\n        let facebookBtn = (this.state.fbDisplay) ? <FacebookLogin appId=\"892789337958489\"\r\n            textButton=\"Link with Facebook\"\r\n            fields=\"name,email,picture\"\r\n            cssClass=\"btn btn-sm blue white-text\"\r\n            callback={this.responseFacebook}\r\n        /> : <React.Fragment> You have successfully linked your account with facebook </React.Fragment>\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"5\">\r\n                            <MDBAnimation type=\"slideInLeft\">\r\n                                <div>\r\n                                    <h3>Live Preview</h3>\r\n                                    <hr />\r\n                                    {/* The pic will take very long to load */}\r\n                                    <StudentProfileCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\r\n                                </div>\r\n                            </MDBAnimation>\r\n                        </MDBCol>\r\n                        <MDBCol size=\"7\">\r\n                        <MDBAnimation type=\"slideInRight\">\r\n                            <h3>Update Profile</h3>\r\n                            <hr />\r\n                            <MDBInput id='name' value={this.state.name} label=\"Full Name\" icon=\"user\" disabled onChange={this.handleChange} >\r\n                            </MDBInput>\r\n                            <MDBInput id='email' value={this.state.email} label=\"E-mail address\" icon=\"envelope\" onChange={this.handleChange} >\r\n                            </MDBInput>\r\n                            <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.emailError}</div>\r\n                            <Uploadfile picUpload={this.PictureUploaded} />\r\n                            <select onChange={this.onChoose} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\r\n                                <option value={'TS1'}>TS1</option>\r\n                                <option value={'TS2'}>TS2</option>\r\n                                <option value={'TS3'}>TS3</option>\r\n                                <option value={'TS4'}>TS4</option>\r\n                            </select>\r\n                            <br /> <br />\r\n                            {facebookBtn}\r\n                            <br />\r\n                            <MDBBtn\r\n                                onClick={this.onSubmitAll}\r\n                                color=\"blue\"\r\n                                className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                Update Profile\r\n                            </MDBBtn>\r\n                            <br />\r\n                            <br />\r\n                            <MDBBtn\r\n                                onClick={this.GoBack}\r\n                                color=\"red\"\r\n                                className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                Back\r\n                            </MDBBtn>\r\n                            </MDBAnimation>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <br />\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nStudentProfile.Proptypes = {\r\n    getStudentInfo: Proptypes.func.isRequired,\r\n    showTutorials: Proptypes.func.isRequired,\r\n    facebookAccountLink: Proptypes.func.isRequired,\r\n    updateProfile: Proptypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    student: state.auth.studentinfo,\r\n    allTutorials: state.tutorial.tutorialgrp,\r\n\r\n})\r\nexport default connect(mapStateToProps, { getStudentInfo, showTutorials, updateProfile, facebookAccountLink })(StudentProfile)\r\n","import React from 'react';\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\nconst ProfProfileCard = ({ studname, profilepic, studemail, studtutgrp }) => {\r\n  /**\r\n   * ProfProfileCard\r\n   */\r\n  return (\r\n    <div>\r\n      <MDBCard style={{ width: \"22rem\" }}>\r\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{studname}</MDBCardTitle>\r\n          <MDBCardText>\r\n            Email: {studemail} <br />\r\n                Tutorial Group: {studtutgrp}\r\n          </MDBCardText>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfProfileCard;","import React, { Component } from 'react'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation } from \"mdbreact\"\r\nimport Uploadfile from '../components/share/Uploadfile'\r\nimport StudentInfo from '../components/marking/StudentInfo'\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\nimport { getProfInfo, updateProfile, facebookAccountLink } from '../Redux/Actions/AuthAction'\r\nimport { showTutorials } from '../Redux/Actions/TutorialAction'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport FacebookLogin from 'react-facebook-login'\r\nimport ProfProfileCard from '../components/profprofile/ProfProfileCard'\r\n\r\nclass ProfessorProfile extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     * set studid to local storage studid\r\n     * set email to local storage email\r\n     * set picture to local storage picture\r\n     * set name to local storage name\r\n     * set fbid to local storage fbid\r\n     * set fbDisplay to false\r\n     * set emailError to \"\"\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        studid: localStorage.getItem(\"studid\"),\r\n        email: localStorage.getItem(\"email\"),\r\n        picture: localStorage.getItem(\"picture\"),\r\n        name: localStorage.getItem(\"name\"),\r\n        fbid: localStorage.getItem(\"fbid\"),\r\n        fbDisplay: false,\r\n        emailError:\"\",\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.fbid == '') {\r\n            this.setState({ fbDisplay: true })\r\n        }\r\n        this.getProfDetails();\r\n        this.props.showTutorials();\r\n    }\r\n/**\r\n * getProfDetails\r\n */\r\n    getProfDetails() {\r\n        const form = {\r\n            id: this.state.studid\r\n        }\r\n        this.props.getProfInfo(form)\r\n    }\r\n/**\r\n * onChoose\r\n */\r\n    onChoose = (e) => {\r\n        this.setState({\r\n            tutgrp: e.target.value\r\n        });\r\n    }\r\n/**\r\n * validate\r\n * Error handling when field is empty\r\n */\r\n    validate = () => {\r\n        let emailError = \"\";\r\n        if (!this.state.email){\r\n            emailError = \"Email cannot be empty\";\r\n        }\r\n        else {\r\n            if (!this.state.email.includes('@')){\r\n                emailError = \"Invalid email\";\r\n            }\r\n        }\r\n        if (emailError){\r\n            this.setState({emailError});\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n/**\r\n * onSubmitAll\r\n */\r\n    onSubmitAll = () => {\r\n        const form = {\r\n            id: this.state.studid,\r\n            name: this.state.name,\r\n            fbid: this.state.fbid,\r\n            email: this.state.email,\r\n            picture: this.state.picture,\r\n            tutgrp: this.state.tutgrp\r\n        }\r\n        const isValid = this.validate();\r\n\r\n        if (isValid){\r\n            this.setState({emailError: \"\"})\r\n            this.props.updateProfile(form);\r\n            localStorage.setItem(\"picture\", this.state.picture)\r\n            localStorage.setItem(\"tutgrp\", this.state.tutgrp)\r\n            localStorage.setItem(\"email\", this.state.email)\r\n            localStorage.setItem(\"name\", this.state.name)\r\n            localStorage.setItem(\"fbid\", this.state.fbid)\r\n            this.props.history.push(\"/home\")\r\n        }\r\n        \r\n    }\r\n/**\r\n * GoBack\r\n */\r\n    GoBack = ()=> { this.props.history.push(\"/home\")}\r\n\r\n    /**\r\n     * handleChange\r\n     * @param {*} e \r\n     */\r\n    handleChange = (e) => { // to change state everytime you type -- question: value\r\n        this.setState({\r\n            [e.target.id]: e.target.value,\r\n        })\r\n    }\r\n    /**\r\n     * PictureUpload\r\n     * @param {*} pic \r\n     */\r\n    PictureUploaded = (pic) => {\r\n        console.log(pic)\r\n        this.setState({ picture: pic });\r\n    }\r\n\r\n    /**\r\n     * responseFacebook\r\n     * @param {*} response \r\n     */\r\n    responseFacebook = (response) => {\r\n        this.setState({\r\n            fbid: response.id,\r\n            fblogin: true\r\n        })\r\n        this.FbLink(response.id)\r\n    }\r\n    /**\r\n     * FbLink\r\n     * @param {*} id \r\n     */\r\n    FbLink = (id) => {\r\n        this.setState({\r\n            fbid: id,\r\n            fbDisplay: false\r\n        })\r\n        localStorage.setItem(\"fbid\", this.state.fbid)\r\n        const form = {\r\n            id: this.state.studid,\r\n            fbid: this.state.fbid\r\n        }\r\n        this.props.facebookAccountLink(form)\r\n    }\r\n\r\n    /**\r\n     * Professor Profile page\r\n     * @returns Professor Profile page\r\n     */\r\n    render() {\r\n        let facebookBtn = (this.state.fbDisplay) ? <FacebookLogin appId=\"892789337958489\"\r\n            textButton=\"Link with Facebook\"\r\n            fields=\"name,email,picture\"\r\n            cssClass=\"btn btn-sm blue white-text\"\r\n            callback={this.responseFacebook}\r\n        /> : <React.Fragment> You have successfully linked your account with facebook </React.Fragment>\r\n        return (\r\n            <React.Fragment>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        \r\n                        <MDBCol size=\"5\" lg = \"5\" sm = \"12\" >\r\n                        <MDBAnimation type=\"slideInLeft\">\r\n                            <div>\r\n                                <h3>Live Preview</h3>\r\n                                <hr />\r\n                                {/* The pic will take very long to load */}\r\n                                <ProfProfileCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\r\n                            </div>\r\n                            </MDBAnimation>\r\n                        </MDBCol>\r\n                        \r\n                        \r\n                        <MDBCol  size=\"7\" lg = \"7\" sm = \"12\">\r\n                        <MDBAnimation type=\"slideInRight\">\r\n                            <h3>Update Profile</h3>\r\n                            <hr />\r\n                            <MDBInput id='name' value={this.state.name} label=\"Full Name\" icon=\"user\" onChange={this.handleChange} >\r\n                            </MDBInput>\r\n                            <MDBInput id='email' value={this.state.email} label=\"E-mail address\" icon=\"envelope\" onChange={this.handleChange} >\r\n                            </MDBInput>\r\n                            <div style = {{fontSize: 15, color:\"rgb(255, 61, 61)\"}} > {this.state.emailError} </div>\r\n                            <Uploadfile picUpload={this.PictureUploaded} />\r\n                            <select onChange={this.onChoose} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\r\n                                <option value={'TS1'}>TS1</option>\r\n                                <option value={'TS2'}>TS2</option>\r\n                                <option value={'TS3'}>TS3</option>\r\n                                <option value={'TS4'}>TS4</option>\r\n                            </select>\r\n                            <br /> <br />\r\n                            {facebookBtn}\r\n                            <br />\r\n                            <MDBBtn\r\n                                onClick={this.onSubmitAll}\r\n                                color=\"blue\"\r\n                                className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                Update Profile\r\n                            </MDBBtn>\r\n                            <br />\r\n                            <br />\r\n                            <MDBBtn\r\n                                onClick={this.GoBack}\r\n                                color=\"red\"\r\n                                className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                Back\r\n                            </MDBBtn>\r\n                            </MDBAnimation>\r\n                        </MDBCol>\r\n                        \r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <br />\r\n                <Footer />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nProfessorProfile.Proptypes = {\r\n    getProfInfo: Proptypes.func.isRequired,\r\n    showTutorials: Proptypes.func.isRequired,\r\n    facebookAccountLink: Proptypes.func.isRequired,\r\n    updateProfile: Proptypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    student: state.auth.profinfo,\r\n    allTutorials: state.tutorial.tutorialgrp,\r\n\r\n})\r\nexport default connect(mapStateToProps, { getProfInfo, showTutorials, updateProfile, facebookAccountLink })(ProfessorProfile)\r\n","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\r\nimport { connect } from 'react-redux'\r\nimport { MDBContainer, MDBRow, MDBBtn,MDBAnimation } from \"mdbreact\"\r\n\r\n\r\nimport TwitterCard from '../components/homepage/TwitterCard'\r\n\r\nclass StudentNews extends Component {\r\n    /**\r\n     * state\r\n     * set usertype to local storage usertype\r\n     */\r\n    state = {\r\n        usertype: localStorage.getItem(\"usertype\")\r\n    }\r\n    componentDidMount() {\r\n        if (this.state.usertype == \"Professor\")\r\n            this.props.history.push(\"/home\")\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack=() => {this.props.history.push(\"/studentmain\")}\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * StudentNews page\r\n     * @returns StudentNews page\r\n     */\r\n    render() {\r\n        let twitterPosts = this.props.twitter.map(x => {\r\n            return (\r\n                <TwitterCard key={x.id_str} post={x} />\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBAnimation type=\"slideInUp\" count={1}>\r\n                <MDBContainer>\r\n                    <br />\r\n                    <h2>NTU Assignment News</h2>\r\n                    <hr />\r\n                    <MDBRow>\r\n                        {twitterPosts}\r\n                    </MDBRow>\r\n                    <br/>\r\n                    <MDBBtn color=\"red\" onClick = {this.GoBack} > Back\r\n                       </MDBBtn>\r\n                    <br />\r\n                </MDBContainer>\r\n                </MDBAnimation>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nStudentNews.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    twitter: state.twitter.items,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(StudentNews)\r\n","import React, { Component } from 'react'\r\nimport { MDBListGroup, MDBListGroupItem, MDBBadge, MDBIcon } from 'mdbreact';\r\n\r\nclass ClassmateList extends Component {\r\n    /**\r\n     * state\r\n     * Set default hover to false \r\n     */\r\n    state = {\r\n        hover: false\r\n    }\r\n    /**\r\n     * selectCompetitor\r\n     * @param {*} name \r\n     * @param {*} id \r\n     */\r\n    selectCompetitor = (name, id) =>{\r\n        this.props.competitorSelect(name,id)\r\n    }\r\n    /**\r\n     * onHover\r\n     * set hover to the opposite state\r\n     */\r\n    onHover = () => {\r\n        this.setState({hover : !this.state.hover})\r\n    }\r\n\r\n    /**\r\n     * Classmatelist\r\n     * @returns classmatelist\r\n     */\r\n    render() {\r\n        var linkColor = (this.state.hover) ? {color: 'blue'} : {color: 'grey'}\r\n        let classmate = this.props.classmates.map(x => {\r\n            return(\r\n                <MDBListGroupItem onMouseOver={this.onHover} onMouseLeave={this.onHover} key={x.id} className=\"d-flex justify-content-between align-items-center\" onClick={() => this.selectCompetitor(x.name, x.studid)} hover>{x.name}<MDBIcon style={linkColor} icon=\"arrow-right\" />\r\n                </MDBListGroupItem>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <MDBListGroup style={{ width: \"22rem\" }}>\r\n                   {classmate}\r\n                </MDBListGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ClassmateList","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\n\r\nclass StudentAssignment extends Component {\r\n    /**\r\n     * SendNotification\r\n     * @param {*} leaderboardid data retrieve from leaderboardid\r\n     * @param {*} tutid data retrieve from tutid\r\n     */\r\n    SendNotification = (leaderboardid,tutid) =>{\r\n        this.props.notification(leaderboardid,tutid)\r\n    }\r\n    /**\r\n     * StudentAssignment\r\n     * @returns the table of studentAssignment with the id, tutname, score and date and display them\r\n     */\r\n    render() {\r\n        let myCompletedtut = this.props.myTut.map(x => {\r\n            return (\r\n                <tr key={x.id}>\r\n                    <td>{x.tutname}</td>\r\n                    <td>{x.score}</td>\r\n                    <td>{x.date}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.SendNotification(x.id,x.tutid)}> Compete </MDBBtn></td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <MDBTable hover>\r\n                    <MDBTableHead>\r\n                        <tr>\r\n                            <th>Assignment Name</th>\r\n                            <th>Score</th>\r\n                            <th>Submitted on</th>\r\n                            <th>Compete</th>\r\n                        </tr>\r\n                    </MDBTableHead>\r\n                    <MDBTableBody>\r\n                        {myCompletedtut}\r\n                    </MDBTableBody>\r\n                </MDBTable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default StudentAssignment","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\"\r\nimport ClassmateList from '../components/competepage/ClassmateList'\r\nimport StudentAssignment from '../components/competepage/StudentAssignment'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchLeaderboard, myCompletedTutorial, sendCompeteRequest } from '../Redux/Actions/GameActions'\r\n\r\nclass Compete extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     * set name to local storage name\r\n     * set studid to localstorae studid\r\n     * set competitor, competitorid to \"\"\r\n     * set Assignmentdisplay to false\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        name: localStorage.getItem(\"name\"),\r\n        studid: localStorage.getItem(\"studid\"),\r\n        competitor: '',\r\n        competitorid: '',\r\n        Assignmentdisplay: false\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchLeaderboard();\r\n        this.getMycompletedTutList();\r\n    }\r\n    /**\r\n     * getMycompletedTutList\r\n     */\r\n    getMycompletedTutList() {\r\n        const form = {\r\n            studid: this.state.studid\r\n        }\r\n        this.props.myCompletedTutorial(form)\r\n    }\r\n    /**\r\n     * CompetitorSelect\r\n     * @param {*} name\r\n     * @param {*} competitorid \r\n     */\r\n    CompetitorSelect = (name, competitorid) => {\r\n        this.setState({ competitor: name, competitorid: competitorid, Assignmentdisplay: true })\r\n    }\r\n\r\n    /**\r\n     * CreateNotification\r\n     * @param {*} leaderboardid \r\n     * @param {*} tutid \r\n     */\r\n    CreateNotification = (leaderboardid, tutid) => {\r\n        const form = {\r\n            requestorid: localStorage.getItem(\"studid\"),\r\n            competitorid: this.state.competitorid,\r\n            leaderboardid: leaderboardid,\r\n            tutid: tutid\r\n        }\r\n        this.props.sendCompeteRequest(form);\r\n        this.props.history.push(\"/challenger\")\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => { this.props.history.push(\"/studentmain\") }\r\n\r\n    /**\r\n     * Compete page\r\n     * @returns Compete page\r\n     */\r\n    render() {\r\n        let currentclass = this.props.leaderboard.filter(x => x.tutgrp === this.state.tutgrp && x.name !== this.state.name)\r\n        let classMates = [...new Set(currentclass.map(item => ({ id: item.id ,name: item.name, studid: item.studid })))];\r\n        let competeDisplay = (this.state.competitor === '') ? <h3>My classmates</h3> : <h3>Competing with {this.state.competitor}</h3>;\r\n        console.log(this.props.mytut)\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n\r\n                        <MDBCol size=\"4\">\r\n                            <MDBAnimation type=\"slideInLeft\" >\r\n                                {competeDisplay}\r\n                                <hr />\r\n                                <ClassmateList classmates={classMates} competitorSelect={this.CompetitorSelect} />\r\n                            </MDBAnimation>\r\n\r\n                        </MDBCol>\r\n\r\n\r\n                        <MDBCol size=\"8\">\r\n                            {this.state.Assignmentdisplay &&\r\n                                <MDBAnimation type=\"slideInRight\">\r\n                                    <h3>Which Assignment to compete?</h3>\r\n                                    <hr />\r\n                                    <StudentAssignment myTut={this.props.mytut} notification={this.CreateNotification} />\r\n                                </MDBAnimation>\r\n                            }\r\n                        </MDBCol>\r\n\r\n                    </MDBRow>\r\n                    <MDBAnimation type=\"slideInLeft\" >\r\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\r\n                       </MDBBtn>\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n                <br />\r\n                <Footer />\r\n            </div >\r\n        )\r\n    }\r\n}\r\nCompete.propTypes = {\r\n    fetchLeaderboard: PropTypes.func.isRequired,\r\n    myCompletedTutorial: PropTypes.func.isRequired,\r\n    sendCompeteRequest: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    leaderboard: state.game.records,\r\n    mytut: state.game.completedtut\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchLeaderboard, myCompletedTutorial, sendCompeteRequest })(Compete)","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\n\r\nclass Competitorlist extends Component {\r\n    /**\r\n     * ViewCompetition\r\n     * @param {*} compid set compid\r\n     * @param {*} studid set studid\r\n     * @param {*} tutid set tutid\r\n     * @param {*} myldrid set myldrid\r\n     */\r\n    viewCompetition = (compid, studid, tutid, myldrid) => {\r\n        localStorage.setItem(\"compstudid\", studid);\r\n        localStorage.setItem(\"compid\", compid);\r\n        localStorage.setItem(\"comptutid\", tutid)\r\n        localStorage.setItem(\"myldrid\", myldrid)\r\n        this.props.navigate()\r\n    }\r\n    /**\r\n     * competitorlist\r\n     * @returns competitorlist details\r\n     */\r\n    render() {\r\n        let competitor = this.props.myCompetitors.map(x => {\r\n            return (\r\n                <tr key={x.competitionid}>\r\n                    <td>{x.name}</td>\r\n                    <td>{x.tutname}</td>\r\n                    <td>{x.score}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.viewCompetition(x.competitionid, x.id, x.tutid, x.leaderboardid)}>View More</MDBBtn></td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <MDBTable hover>\r\n                    <MDBTableHead>\r\n                        <tr>\r\n                            <th>Competitor Name</th>\r\n                            <th>Tutorial Name</th>\r\n                            <th>My Score</th>\r\n                            <th>View</th>\r\n                        </tr>\r\n                    </MDBTableHead>\r\n                    <MDBTableBody>\r\n                        {competitor}\r\n                    </MDBTableBody>\r\n                </MDBTable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Competitorlist","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\r\n\r\nclass Challengerlist extends Component {\r\n    /**\r\n     * viewChallenge\r\n     * @param {*} compid set compid \r\n     * @param {*} studid set studid\r\n     * @param {*} tutid set tutid\r\n     * @param {*} oppldrid set oppldrid\r\n     * @param {*} challengerid set channgerid\r\n     */\r\n    viewChallenge = (compid, studid, tutid, oppldrid, challengerid) => {\r\n        localStorage.setItem(\"mystudid\", studid);\r\n        localStorage.setItem(\"compid\", compid);\r\n        localStorage.setItem(\"comptutid\", tutid)\r\n        localStorage.setItem(\"oppldrid\", oppldrid)\r\n        localStorage.setItem(\"challengerid\", challengerid)\r\n        this.props.navigate()\r\n    }\r\n\r\n    /**\r\n     * ChallengerList\r\n     * @returns challengerlist details\r\n     */\r\n    render() {\r\n        let challenge = this.props.myChallenger.map(x => {\r\n            return (\r\n                <tr key={x.competitionid}>\r\n                    <td>{x.name}</td>\r\n                    <td>{x.tutname}</td>\r\n                    <td>{x.score}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.viewChallenge(x.competitionid, x.competitorid, x.tutid, x.leaderboardid, x.id)}>View More</MDBBtn></td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                <MDBTable hover>\r\n                    <MDBTableHead>\r\n                        <tr>\r\n                            <th>Challenger Name</th>\r\n                            <th>Tutorial Name</th>\r\n                            <th>Challengers Score</th>\r\n                            <th>View</th>\r\n                        </tr>\r\n                    </MDBTableHead>\r\n                    <MDBTableBody>\r\n                        {challenge}\r\n                    </MDBTableBody>\r\n                </MDBTable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Challengerlist","export default __webpack_public_path__ + \"static/media/friendly.0fd67717.jpg\";","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn, MDBView, MDBMask } from \"mdbreact\"\r\nimport Competitorlist from '../components/challengerpage/Competitorlist'\r\nimport Challengerlist from '../components/challengerpage/Challengerlist'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { getMyCompetitors, getChallengers } from '../Redux/Actions/GameActions'\r\nimport friendly from '../assets/friendly.jpg'\r\n\r\nclass Challenger extends Component {\r\n    /**\r\n     * state\r\n     * set studid to local storage studid\r\n     */\r\n    state = {\r\n        studid: localStorage.getItem(\"studid\")\r\n    }\r\n    componentDidMount() {\r\n        this.getCompetitor();\r\n        this.getChallengers();\r\n    }\r\n\r\n    /**\r\n     * getCompeitior\r\n     */\r\n    getCompetitor() {\r\n        const form = {\r\n            requestorid: this.state.studid\r\n        }\r\n        this.props.getMyCompetitors(form)\r\n    }\r\n    /**\r\n     * getChallengers\r\n     */\r\n    getChallengers() {\r\n        const form = {\r\n            competitorid: this.state.studid\r\n        }\r\n        this.props.getChallengers(form)\r\n    }\r\n    /**\r\n     * ViewCompetition\r\n     */\r\n    ViewCompetition = () => {\r\n        this.props.history.push('/competitor')\r\n    }\r\n    /**\r\n     * ViewChallenge\r\n     */\r\n    ViewChallenge = () => {\r\n        this.props.history.push('/challenge')\r\n    }\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * competeMode \r\n     */\r\n    CompeteMode = () => this.props.history.push('/compete')\r\n\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => { this.props.history.push(\"/studentmain\") }\r\n\r\n/**\r\n * Challenger page\r\n * @returns Challenger page\r\n */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBAnimation type=\"slideInDown\">\r\n                        <MDBRow center>\r\n                            <MDBCol size=\"8\">\r\n                                <h3>Compete with your friends!</h3>\r\n                                <hr />\r\n                                <MDBView hover>\r\n                                    <img src={friendly} href=\"#\" onClick={this.CompeteMode} className=\"img-fluid\" alt=\"\" />\r\n                                    <MDBMask className=\"flex-center\" overlay=\"blue-strong\" onClick={this.CompeteMode}>\r\n                                        <p className=\"white-text\">Click here to compete with your friends!</p>\r\n                                    </MDBMask>\r\n                                </MDBView>\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n                    <br />\r\n                    <MDBAnimation type=\"slideInDown\">\r\n                        <MDBRow>\r\n                            <MDBCol size=\"12\">\r\n                                <h3>My Competitors Request</h3>\r\n                                <hr />\r\n                                <Competitorlist navigate={this.ViewCompetition} myCompetitors={this.props.competitors} />\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n                    <br />\r\n                    <MDBAnimation type=\"slideInUp\">\r\n                        <MDBRow>\r\n                            <MDBCol>\r\n                                <h3>My Challengers</h3>\r\n                                <hr />\r\n                                <Challengerlist navigate={this.ViewChallenge} myChallenger={this.props.challengers} />\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                        <MDBBtn color=\"red\" onClick={this.GoBack}> Back</MDBBtn>\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nChallenger.propTypes = {\r\n    getMyCompetitors: PropTypes.func.isRequired,\r\n    getChallengers: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    competitors: state.game.competitors,\r\n    challengers: state.game.challengers\r\n});\r\nexport default connect(mapStateToProps, { getMyCompetitors, getChallengers })(Challenger)","import React, { Component } from 'react'\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\nclass CompetitorDetail extends Component {\r\n/**\r\n * CompetitorDetails\r\n * @returns return competitor details\r\n */\r\n\r\n    render() {\r\n        let details = this.props.student.map(x => {\r\n            return (\r\n                <MDBCard key={x.id} style={{ width: \"22rem\" }}>\r\n                    <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{x.name}</MDBCardTitle>\r\n                        <MDBCardText>\r\n                            Email: {x.email} <br />\r\n                Tutorial Group: {x.tutgrp}\r\n                        </MDBCardText>\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                {details}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CompetitorDetail","import React, { Component } from 'react'\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCol, MDBRow, MDBContainer, MDBCardText } from 'mdbreact';\r\n\r\nclass MyDetails extends Component {\r\n/**\r\n * My Details\r\n * @returns my details\r\n */\r\n    render() {\r\n        const { student } = this.props\r\n        return (\r\n            <div>\r\n                {student && student.map(x => {\r\n                    return (\r\n                        <MDBCard key={x.id} style={{ width: \"22rem\" }}>\r\n                            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\r\n                            <MDBCardBody>\r\n                                <MDBCardTitle>{x.name}</MDBCardTitle>\r\n                                <MDBCardText>\r\n                                    Email: {x.email} <br />\r\n                Tutorial Group: {x.tutgrp}\r\n                                </MDBCardText>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MyDetails","import React, { Component } from 'react'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation, MDBProgress } from \"mdbreact\"\r\nimport CompetitorDetail from '../components/challengerpage/CompetitorDetail'\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\nimport { getStudentInfo, getCompeteMyInfo } from '../Redux/Actions/AuthAction'\r\nimport { sendComment, getCurrentUserScore, getCompetitorScore } from '../Redux/Actions/GameActions'\r\nimport MyDetails from '../components/challengerpage/MyDetails'\r\n\r\nclass Competitor extends Component {\r\n    /**\r\n     * state\r\n     * set studid to local storage compstudid\r\n     * set compid to local storage compid\r\n     * set tutid to local storage comptutid\r\n     * set myldrid to local storage myldrid\r\n     * set mystudid to local storage studid\r\n     * set comment and commentError to \"\"\r\n     */\r\n    state = {\r\n        studid: localStorage.getItem(\"compstudid\"),\r\n        compid: localStorage.getItem(\"compid\"),\r\n        tutid: localStorage.getItem(\"comptutid\"),\r\n        myldrid: localStorage.getItem(\"myldrid\"),\r\n        mystudid: localStorage.getItem(\"studid\"),\r\n        comment: '',\r\n        commentError:\"\"\r\n    }\r\n    componentDidMount() {\r\n        console.log(this.state)\r\n        this.getCompetitorDetails()\r\n        this.getCompetitorScoreBoard();\r\n        this.getMyScore();\r\n        this.getmyDetails();\r\n    }\r\n/**\r\n * validate\r\n * @returns error handling when comment is empty\r\n */\r\n    validate() {\r\n        let commentError = \"\";\r\n        if (!this.state.comment){\r\n            commentError= \"Comment cannot be empty\";\r\n            this.setState({commentError});\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n/**\r\n * getCompetitorDetails\r\n */\r\n    getCompetitorDetails() {\r\n        const form = {\r\n            id: this.state.studid\r\n        }\r\n        this.props.getStudentInfo(form)\r\n    }\r\n    /**\r\n     * getmyDetails\r\n     */\r\n    getmyDetails() {\r\n        const form = {\r\n            id: this.state.mystudid\r\n        }\r\n        this.props.getCompeteMyInfo(form)\r\n    }\r\n    /**\r\n     * getCompetitorScoreBoard\r\n     */\r\n    getCompetitorScoreBoard() {\r\n        const form = {\r\n            studid: this.state.studid,\r\n            tutid: this.state.tutid\r\n        }\r\n        this.props.getCompetitorScore(form)\r\n    }\r\n    /**\r\n     * getMyScore\r\n     */\r\n    getMyScore() {\r\n        const form = {\r\n            leaderboardid: this.state.myldrid\r\n        }\r\n        this.props.getCurrentUserScore(form)\r\n    }\r\n    /**\r\n     * SendComment\r\n     */\r\n    SendComment = () => {\r\n       \r\n        const form = {\r\n            compid: this.state.compid,\r\n            comment: this.state.comment\r\n        }\r\n        const isValid = this.validate();\r\n        if (isValid) {\r\n            this.setState({commentError: \"\"});\r\n            this.props.sendComment(form)\r\n            this.props.history.push('/challenger')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleChange\r\n     * @param {*} e \r\n     */\r\n    handleChange = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value })\r\n    }\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => {\r\n        this.props.history.push('/challenger')\r\n    }\r\n\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n\r\n/**\r\n * Competitor Page\r\n * @returns Competitor Page\r\n */\r\n    render() {\r\n        let myscore = this.props.myScore.map(x => parseInt(x.score))\r\n        let competitorscore = this.props.competitorscore.map(x => parseInt(x.score))\r\n        let resultDisplay = (this.props.competitorscore.length == 0) ? <React.Fragment><h4 className=\"red-text\">This Student have not done this tutorial</h4> <hr/> </React.Fragment> : (myscore[0] < competitorscore[0]) ? <React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://media.esportsedition.com/wp-content/uploads/2016/07/losingstreak-1068x601.jpg\" className=\"img-fluid\" /></React.Fragment> :<React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://i.ytimg.com/vi/8TwCwHHQ6a8/maxresdefault.jpg\" className=\"img-fluid\" /> </React.Fragment>\r\n        \r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <MDBAnimation type=\"slideInLeft\">\r\n                        <br />\r\n                        <MDBRow>\r\n                            <MDBCol size=\"6\">\r\n                                <h3>My Details</h3>\r\n                                <hr />\r\n                                <br />\r\n                                <MyDetails student={this.props.currentUserInfo} />\r\n                                <br /><br />\r\n                                {this.props.myScore && this.props.myScore.map(x => {\r\n                                    return (\r\n                                        <React.Fragment>\r\n                                            <br />\r\n                                            <h3>My Answer</h3>\r\n                                            <hr />\r\n                                            <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\r\n                                            <br /> <br />\r\n                                            <h3>My Score</h3>\r\n                                            <hr />\r\n                                            <MDBRow>\r\n                                                <MDBCol size=\"9\">\r\n                                                    <MDBProgress value={x.score} className=\"my-2\" />\r\n                                                </MDBCol>\r\n                                                <MDBCol size=\"3\">\r\n                                                    Score: {x.score}\r\n                                                </MDBCol>\r\n                                            </MDBRow>\r\n                                            <br />\r\n                                            <h3>Professor's Comment to me</h3>\r\n                                            <hr />\r\n                                            <p>{(x.comment == '') ? \"No Comment\" : x.comment}</p>\r\n                                        </React.Fragment>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </MDBCol>\r\n                            <MDBCol size=\"6\">\r\n                                <h3>Competitor Details</h3>\r\n                                <hr />\r\n                                <CompetitorDetail student={this.props.student} />\r\n                                <br />\r\n                                {this.props.competitorscore && this.props.competitorscore.map(x => {\r\n                                    return (\r\n                                        <React.Fragment>\r\n                                            <br /><br /><br />\r\n                                            <h3>Competitor's Answer</h3>\r\n                                            <hr />\r\n                                            <img src={ x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\r\n                                            <br /> <br />\r\n                                            <h3>Competitor's Score</h3>\r\n                                            <hr />\r\n                                            <MDBRow>\r\n                                                <MDBCol size=\"9\">\r\n                                                    <MDBProgress value={x.score} className=\"my-2\" />\r\n                                                </MDBCol>\r\n                                                <MDBCol size=\"3\">\r\n                                                    Score: {x.score}\r\n                                                </MDBCol>\r\n                                            </MDBRow>\r\n                                            <br />\r\n                                            <h3>Professor's Comment to Competitor</h3>\r\n                                            <hr />\r\n                                            <p>{x.comment}</p>\r\n                                        </React.Fragment>\r\n                                    )\r\n                                }\r\n                                )}\r\n                             \r\n                                <br />\r\n                                <h3>Compose a message to your competitor</h3>\r\n                                <hr />\r\n                                <MDBInput id='comment' value={this.state.comment} label=\"Comment\" icon=\"comment\" onChange={this.handleChange}>\r\n                                </MDBInput>\r\n                                <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.commentError}</div>\r\n                                <MDBBtn\r\n                                    onClick={this.SendComment}\r\n                                    color=\"blue\"\r\n                                    className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                    Send Message\r\n                            </MDBBtn>\r\n                                <MDBBtn\r\n                                    onClick={this.GoBack}\r\n                                    color=\"red\"\r\n                                    className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                    Back\r\n                            </MDBBtn>\r\n                            <br/><br/>\r\n                            {resultDisplay}\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                    </MDBAnimation>\r\n                </MDBContainer>\r\n                <br/><br/>\r\n                <br />\r\n                <Footer />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nCompetitor.Proptypes = {\r\n    getStudentInfo: Proptypes.func.isRequired,\r\n    sendComment: Proptypes.func.isRequired,\r\n    getCurrentUserScore: Proptypes.func.isRequired,\r\n    getCompetitorScore: Proptypes.func.isRequired,\r\n    getCompeteMyInfo: Proptypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    student: state.auth.studentinfo,\r\n    myScore: state.game.myscore,\r\n    competitorscore: state.game.competitor,\r\n    currentUserInfo: state.auth.myInfo\r\n})\r\nexport default connect(mapStateToProps, { getStudentInfo, sendComment, getCurrentUserScore, getCompetitorScore, getCompeteMyInfo })(Competitor)","import React, { Component } from 'react'\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\n\r\nclass ChallengerDetail extends Component {\r\n    /**\r\n     * Challenger details\r\n     * @returns challenger details\r\n     */\r\n    render() {\r\n        let details = this.props.student.map(x => {\r\n            return (\r\n                <MDBCard key={x.id} style={{ width: \"22rem\" }}>\r\n                    <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\r\n                    <MDBCardBody>\r\n                        <MDBCardTitle>{x.name}</MDBCardTitle>\r\n                        <MDBCardText>\r\n                            Email: {x.email} <br />\r\n                Tutorial Group: {x.tutgrp}\r\n                        </MDBCardText>\r\n                    </MDBCardBody>\r\n                </MDBCard>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                {details}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ChallengerDetail","import React, { Component } from 'react'\r\nimport ChallengerDetail from '../components/challengerpage/ChallengerDetail'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\nimport { getStudentInfo, getCompeteMyInfo } from '../Redux/Actions/AuthAction'\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBProgress } from \"mdbreact\"\r\nimport { getComment, getCurrentUserScore, getCompetitorScore } from '../Redux/Actions/GameActions'\r\nimport MyDetails from '../components/challengerpage/MyDetails'\r\n\r\nclass Challenge extends Component {\r\n    /**\r\n     * state\r\n     * set studid to local storage mystudid\r\n     * set compid to local storage compid\r\n     * set tutid to local storage comptutid\r\n     * set myldrid to local storage oppldrid\r\n     * set challengerid to local storage challengerid\r\n     */\r\n    state = {\r\n        studid: localStorage.getItem(\"mystudid\"),\r\n        compid: localStorage.getItem(\"compid\"),\r\n        tutid: localStorage.getItem(\"comptutid\"),\r\n        myldrid: localStorage.getItem(\"oppldrid\"),\r\n        challengerid: localStorage.getItem(\"challengerid\")\r\n    }\r\n    componentDidMount() {\r\n        this.getCompetitorDetails()\r\n        this.retrieveComment()\r\n        this.getMyScoreBoard()\r\n        this.getOppScore()\r\n        this.getmyDetails()\r\n    }\r\n    /**\r\n     * retrieveComment\r\n     */\r\n    retrieveComment() {\r\n        const form = {\r\n            compid: this.state.compid\r\n        }\r\n        this.props.getComment(form)\r\n    }\r\n    /**\r\n     * getcompetitorDetails\r\n     */\r\n    getCompetitorDetails() {\r\n        const form = {\r\n            id: this.state.challengerid\r\n        }\r\n        this.props.getStudentInfo(form)\r\n    }\r\n    /**\r\n     * getmyDetails\r\n     */\r\n    getmyDetails() {\r\n        const form = {\r\n            id: localStorage.getItem(\"studid\")\r\n        }\r\n        this.props.getCompeteMyInfo(form)\r\n    }\r\n    /**\r\n     * getMyscoreBoard\r\n     */\r\n    getMyScoreBoard() {\r\n        const form = {\r\n            studid: this.state.studid,\r\n            tutid: this.state.tutid\r\n        }\r\n        console.log(form)\r\n        //Call Same function coz it's the opposite of competitor\r\n        this.props.getCompetitorScore(form)\r\n    }\r\n    /**\r\n     * getOppScore\r\n     */\r\n    getOppScore() {\r\n        const form = {\r\n            leaderboardid: this.state.myldrid\r\n        }\r\n        //Call Same function coz it's the opposite of competitor\r\n        this.props.getCurrentUserScore(form)\r\n    }\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => {\r\n        this.props.history.push('/challenger')\r\n    }\r\n\r\n    /**\r\n     * notLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * Challenger Page\r\n     * @returns Challenger Page\r\n     */\r\n    render() {\r\n        let myscore = this.props.competitorscore.map(x => parseInt(x.score))\r\n        let competitorscore = this.props.challengerScore.map(x => parseInt(x.score))\r\n\r\n        let comment = this.props.challengecomment.map(x => x.competitormsg)\r\n\r\n        let resultDisplay = (this.props.competitorscore.length == 0) ? <React.Fragment><h4 className=\"red-text\">You have not done this tutorial</h4> <hr/> </React.Fragment> : (myscore[0] < competitorscore[0]) ? <React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://media.esportsedition.com/wp-content/uploads/2016/07/losingstreak-1068x601.jpg\" className=\"img-fluid\" /></React.Fragment> :<React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://i.ytimg.com/vi/8TwCwHHQ6a8/maxresdefault.jpg\" className=\"img-fluid\" /> </React.Fragment>\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <MDBContainer>\r\n                    <br />\r\n                    <MDBRow>\r\n                        <MDBCol size=\"6\">\r\n                            <h3>My Details</h3>\r\n                            <hr />\r\n                            <MyDetails student={this.props.currentUserInfo} />\r\n                            <br /><br />\r\n\r\n                            {this.props.competitorscore && this.props.competitorscore.map(x => {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <h3>My Answer</h3>\r\n                                        <hr />\r\n                                        <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\r\n                                        <br /> <br />\r\n                                        <h3>My Score</h3>\r\n                                        <hr />\r\n                                        <MDBRow>\r\n                                            <MDBCol size=\"9\">\r\n                                                <MDBProgress value={x.score} className=\"my-2\" />\r\n                                            </MDBCol>\r\n                                            <MDBCol size=\"3\">\r\n                                                Score: {x.score}\r\n                                            </MDBCol>\r\n                                        </MDBRow>\r\n                                        <h3>Professor's Comment to me</h3>\r\n                                        <hr />\r\n                                        <p>{(x.comment == '') ? \"No Comment\" : x.comment}</p>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            )}\r\n                            {resultDisplay}\r\n                            \r\n                        </MDBCol>\r\n                        <MDBCol size=\"6\">\r\n                            <h3>Challenger Detail</h3>\r\n                            <hr />\r\n                            <ChallengerDetail student={this.props.student} />\r\n                            <br />\r\n                            {this.props.challengerScore && this.props.challengerScore.map(x => {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <br />\r\n                                        <h3>Competitor's Answer</h3>\r\n                                        <hr />\r\n                                        <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\r\n                                        <br /> <br />\r\n                                        <h3>Competitors Scores</h3>\r\n                                        <hr />\r\n                                        <MDBRow>\r\n                                            <MDBCol size=\"9\">\r\n                                                <MDBProgress value={x.score} className=\"my-2\" />\r\n                                            </MDBCol>\r\n                                            <MDBCol size=\"3\">\r\n                                                Score: {x.score}\r\n                                            </MDBCol>\r\n                                        </MDBRow>\r\n                                        <h3>Professor's Comment to Competitor</h3>\r\n                                        <hr />\r\n                                        <p>{x.comment}</p>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            )}\r\n                            <h3>Challenger Message to you</h3>\r\n                            <hr />\r\n                            <MDBInput disabled value={comment} label=\"Comment\" icon=\"comment\" onChange={this.handleChange}>\r\n                            </MDBInput>\r\n                            <MDBBtn\r\n                                onClick={this.GoBack}\r\n                                color=\"red\"\r\n                                className=\"m-0 px-3 py-2 z-depth-0\">\r\n                                Back\r\n                            </MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <br /><br/><br/>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nChallenge.Proptypes = {\r\n    getStudentInfo: Proptypes.func.isRequired,\r\n    getComment: Proptypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    student: state.auth.studentinfo,\r\n    challengecomment: state.game.comment,\r\n    challengerScore: state.game.myscore,\r\n    competitorscore: state.game.competitor,\r\n    currentUserInfo: state.auth.myInfo\r\n})\r\nexport default connect(mapStateToProps, { getStudentInfo, getCompeteMyInfo, getComment, getCompetitorScore, getCurrentUserScore })(Challenge)","import React from 'react';\r\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\r\n\r\nconst StudentCard = ({ studname, profilepic, studemail, studtutgrp }) => {\r\n  /**\r\n   * StudentCard\r\n   */\r\n  return (\r\n    <div>\r\n       <MDBCard style={{ width: \"22rem\" }}>\r\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{studname}</MDBCardTitle>\r\n          <MDBCardText>\r\n            Email: {studemail} <br />\r\n                Tutorial Group: {studtutgrp}\r\n          </MDBCardText>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentCard;","import { MDBCol, MDBContainer, MDBRow, MDBInput, MDBBtn } from 'mdbreact'\r\nimport React, { Component } from 'react'\r\nimport StudentCard from '../components/mysubmissionpage/StudentCard'\r\nimport Footer from '../components/share/Footer'\r\nimport Navbar from '../components/share/Navbar'\r\nimport { getStudentSubmission } from '../Redux/Actions/GameActions'\r\nimport { connect } from 'react-redux'\r\nimport Proptypes from 'prop-types'\r\n\r\nclass MySubmission extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     * set studid to local storage studid\r\n     * set email to local storage emaol\r\n     * set picture to local storage picture\r\n     * set name to local storage name\r\n     * set fbid to local storage fbid\r\n     * ldrid : id\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        studid: localStorage.getItem(\"studid\"),\r\n        email: localStorage.getItem(\"email\"),\r\n        picture: localStorage.getItem(\"picture\"),\r\n        name: localStorage.getItem(\"name\"),\r\n        fbid: localStorage.getItem(\"fbid\"),\r\n        ldrid: this.props.match.params.id,\r\n    }\r\n    componentDidMount() {\r\n        this.getLeaderBoardSubmission()\r\n    }\r\n    /**\r\n     * getLeaderBoardSubmission\r\n     */\r\n    getLeaderBoardSubmission() {\r\n        const form = {\r\n            id: this.state.ldrid\r\n        }\r\n        this.props.getStudentSubmission(form)\r\n    }\r\n\r\n    /**\r\n     * NotLoggedIn\r\n     */\r\n    NotLoggedIn = () => {\r\n        this.props.history.push('/logout')\r\n    }\r\n    /**\r\n     * GoBack\r\n     */\r\n    GoBack = () => this.props.history.push('/studentmain')\r\n    /**\r\n     * MySubmission page\r\n     * @returns MySubmission page\r\n     */\r\n    render() {\r\n        let ProfComment = this.props.studSubmission.map(x => {\r\n            return (\r\n                <React.Fragment>\r\n                    <MDBInput label=\"Score\" icon=\"star\" disabled value={x.score} />\r\n                    <MDBInput label=\"Comment\" icon=\"comment\" disabled value={x.comment} />\r\n                </React.Fragment>\r\n            )\r\n        })\r\n        let answer = this.props.studSubmission.map(x => <img className=\"img-fluid\" src={x.image} alt=\"\" />)\r\n        return (\r\n            <div>\r\n                <Navbar validateLogin={this.NotLoggedIn} />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"6\">\r\n                            <h3>My Details</h3>\r\n                            <hr />\r\n                            <StudentCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\r\n                        </MDBCol>\r\n                        <MDBCol size=\"6\">\r\n                            <h3>My Answer</h3>\r\n                            <hr />\r\n                            {answer}\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <br />\r\n                    <MDBRow center>\r\n                        <MDBCol size=\"6\">\r\n                            <h3>Professor Comments</h3>\r\n                            <hr />\r\n                            {ProfComment}\r\n                            <MDBBtn color=\"red\" onClick={this.GoBack} size=\"sm\">Back</MDBBtn>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <br /><br /><br />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nMySubmission.Proptypes = {\r\n    getStudentSubmission: Proptypes.func.isRequired\r\n}\r\nconst mapStateToProps = state => ({\r\n    studSubmission: state.game.submission\r\n})\r\n\r\nexport default connect(mapStateToProps, { getStudentSubmission })(MySubmission)\r\n","import React, { Component } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\n\r\nclass BarGraph extends Component {\r\n    /**\r\n     * \r\n     */\r\n    state = {\r\n        chartData: {},\r\n        data: this.props.GraphData\r\n    }\r\n    componentDidMount() {\r\n        this.PopulateData()\r\n    }\r\n    /**\r\n     * \r\n     * @param {*} e \r\n     * @param {*} elem \r\n     */\r\n    ViewStudent = (e, elem) => {\r\n        if (elem.length > 0) {\r\n            var ind = elem[0]._index\r\n            this.props.viewStudent(this.state.data[ind].studid)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    PopulateData = () => {\r\n        this.setState({\r\n            chartData: {\r\n                labels: [...this.state.data.map(x => x.name)],\r\n                datasets: [{\r\n                    label: 'Score',\r\n                    data: [...this.state.data.map(x => x.score),0],\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 1,\r\n                }],\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    render() {\r\n        const options = {\r\n            onClick: (e, elem) => this.ViewStudent(e, elem),\r\n            scales: {\r\n                xAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Student Name'\r\n                    },\r\n                }],\r\n                yAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: \"Student's Score\"\r\n                    },\r\n                }],\r\n            }\r\n            \r\n        }\r\n        return (\r\n            <div>\r\n                <Bar\r\n                    data={this.state.chartData}\r\n                    width={100}\r\n                    height={50}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default BarGraph","import React, { Component } from 'react'\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact'\r\n\r\nclass StatisticalAnalysis extends Component {\r\n    /**\r\n     * \r\n     */\r\n    state = {\r\n        score: [...this.props.scores.map(x => parseFloat(x.score))],\r\n        count: '',\r\n        average: '',\r\n        standardDeviation: '',\r\n        minimum: '',\r\n        maximum: ''\r\n    }\r\n    componentDidMount() {\r\n       this.CalclateStatistics();       \r\n    }\r\n    /**\r\n     * \r\n     */\r\n    CalclateStatistics() {\r\n        let count = this.state.score.length\r\n        let minimum = Math.min(...this.state.score)\r\n        let maximum = Math.max(...this.state.score)\r\n        let average = (this.state.score.reduce((total, current) => total += current,0) / count).toFixed(2)\r\n        let standardDeviation = Math.sqrt(this.state.score.map(x => Math.pow(x - average, 2)).reduce((summation, i) => summation += i, 0) / count).toFixed(2)\r\n\r\n        this.setState({\r\n            count,\r\n            minimum,\r\n            maximum,\r\n            average,\r\n            standardDeviation\r\n        })\r\n    }\r\n/**\r\n * \r\n * @returns \r\n */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MDBTable hover>\r\n                    <MDBTableHead color=\"blue\" textWhite>\r\n                        <tr>\r\n                            <th>Count</th>\r\n                            <th>Average</th>\r\n                            <th>Standard Deviation</th>\r\n                            <th>Minimum</th>\r\n                            <th>Maximum</th>\r\n                        </tr>\r\n                    </MDBTableHead>\r\n                    <MDBTableBody>\r\n                        <tr>\r\n                            <td>{this.state.count}</td>\r\n                            <td>{this.state.average}</td>\r\n                            <td>{this.state.standardDeviation}</td>\r\n                            <td>{this.state.minimum}</td>\r\n                            <td>{this.state.maximum}</td>\r\n                        </tr>\r\n                    </MDBTableBody>\r\n                </MDBTable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default StatisticalAnalysis","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nclass LineGraph extends Component {\r\n    /**\r\n     * \r\n     */\r\n    state = {\r\n        chartData: {},\r\n        data: this.props.LineGraphData\r\n    }\r\n    componentDidMount() {\r\n        this.PopulateData()\r\n    }\r\n    /**\r\n     * \r\n     */\r\n    PopulateData = () => {\r\n        this.setState({\r\n            chartData: {\r\n                labels: [0,...this.state.data.map((x,index) => index + 1)],\r\n                datasets: [\r\n                    {\r\n                        label: this.state.data[0].name ,\r\n                        data: [0,...this.state.data.map(x => parseFloat(x.score))],\r\n                        fill: true,\r\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n                        borderColor: \"rgba(75,192,192,1)\"\r\n                    }\r\n                ]\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    render() {\r\n        const options = {\r\n            scales: {\r\n                xAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                      display: true,\r\n                      labelString: 'Number of Tries'\r\n                    },\r\n                  }],\r\n                  yAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                      display: true,\r\n                      labelString: \"Student's Score\"\r\n                    },\r\n                  }],\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                <Line data={this.state.chartData} options={options}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LineGraph","import React, { Component } from 'react'\r\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from 'mdbreact';\r\n\r\nclass StudentCard extends Component {\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.profile && this.props.profile.map(x => {\r\n                    return (\r\n                        <MDBCard style={{ width: \"22rem\" }}>\r\n                            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\r\n                            <MDBCardBody>\r\n                                <MDBCardTitle>{x.name}</MDBCardTitle>\r\n                                <MDBCardText>\r\n                                    Email: {x.email} <br/>\r\n                                    Tutorial Group: {x.tutgrp}\r\n                                </MDBCardText>\r\n                                <a className=\"btn blue white-text\" href={\"mailto:\" + x.email}>Email Student</a>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default StudentCard","import React, { Component } from 'react'\r\nimport { MDBCol, MDBContainer, MDBRow, MDBIcon, MDBBtn } from 'mdbreact'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport BarGraph from '../components/reportpage/BarGraph'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\r\nimport StatisticalAnalysis from '../components/reportpage/StatisticalAnalysis'\r\nimport LineGraph from '../components/reportpage/LineGraph'\r\nimport StudentCard from '../components/reportpage/StudentCard'\r\nimport { getStudentInfo } from '../Redux/Actions/AuthAction'\r\n\r\nclass Report extends Component {\r\n    /**\r\n     * state\r\n     * set tutgrp to local storage tutgrp\r\n     * set tutid to local storage selectedTutId\r\n     * set tutname to local storage selectedTutName\r\n     * set student to []\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        tutid: localStorage.getItem(\"selectedTutId\"),\r\n        tutname: localStorage.getItem(\"selectedTutName\"),\r\n        student: []\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchLeaderboard();\r\n    }\r\n    /**\r\n     * StudentAnalysis\r\n     * @param {*} studid \r\n     */\r\n    StudentAnalysis = (studid) => {\r\n        this.setState({ student: [] })\r\n        let selectedStudent = this.props.leaderboard.filter(x => x.tutid === this.state.tutid && x.studid === studid && x.tutgrp === this.state.tutgrp)\r\n        this.getStudentDetails(studid)\r\n        this.setState({ student: selectedStudent })\r\n    }\r\n    /**\r\n     * GetStudentDetails\r\n     * @param {*} studid \r\n     */\r\n    getStudentDetails(studid) {\r\n        const form = {\r\n            id: studid\r\n        }\r\n        this.props.getStudentInfo(form)\r\n    }\r\n    /**\r\n     * PrintPage\r\n     */\r\n    printPage = () => {\r\n        window.print()\r\n    }\r\n\r\n    /**\r\n     * goBack\r\n     */\r\n    goBack = () => this.props.history.push('/reporthome')\r\n\r\n    /**\r\n     * Report page\r\n     * @returns Report page\r\n     */\r\n    render() {\r\n        let { leaderboard } = this.props\r\n        let CurrentAssginmentScores = leaderboard.filter(x => x.tutgrp === this.state.tutgrp && x.tutid === this.state.tutid).map(z => ({ name: z.name, score: z.score, studid: z.studid }))\r\n        let HighestScoreForEachStudent = CurrentAssginmentScores.reduce((state, current) => {\r\n            let prevIndex = state.findIndex(x => x.name === current.name);\r\n            if (prevIndex === -1)\r\n                state.push(current)\r\n            else if (state[prevIndex].score < current.score)\r\n                state[prevIndex] = current\r\n            return state\r\n        }, [])\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"12\">\r\n                            <h3>Student Scores for: {this.state.tutname} </h3>\r\n                            <hr />\r\n                            {leaderboard && <BarGraph GraphData={HighestScoreForEachStudent} AssignmentScoreList={CurrentAssginmentScores} viewStudent={this.StudentAnalysis} />}\r\n                        </MDBCol>\r\n                        <br />\r\n                        <MDBCol size=\"12\">\r\n                            <h3>Statistical Analysis</h3>\r\n                            <hr />\r\n                            {CurrentAssginmentScores && <StatisticalAnalysis scores={CurrentAssginmentScores} />}\r\n                        </MDBCol>\r\n                        {(this.state.student.length !== 0 && this.props.selectedStudent) &&\r\n                            <React.Fragment>\r\n                                <MDBCol size=\"4\">\r\n                                    <h3>Student Profile</h3>\r\n                                    <hr />\r\n                                    <StudentCard key={this.props.selectedStudent.id} profile={this.props.selectedStudent} />\r\n                                </MDBCol>\r\n\r\n                                <MDBCol size=\"8\">\r\n                                    <h3>Student Performance</h3>\r\n                                    <hr />\r\n                                    <LineGraph LineGraphData={this.state.student} />\r\n                                    <MDBBtn onClick={this.printPage} color=\"blue\">Print <MDBIcon icon=\"print\" className=\"mr-1\" /></MDBBtn>\r\n                                </MDBCol>\r\n                            </React.Fragment>\r\n                        }\r\n                    </MDBRow>\r\n                    <MDBBtn onClick={this.goBack} color=\"red\">Back</MDBBtn>\r\n                </MDBContainer>\r\n                <br /><br />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nReport.propTypes = {\r\n    fetchLeaderboard: PropTypes.func.isRequired,\r\n    getStudentInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    leaderboard: state.game.records,\r\n    selectedStudent: state.auth.studentinfo,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchLeaderboard, getStudentInfo })(Report)","import React, { Component } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\n\r\nclass TutorialAvgGraph extends Component {\r\n    /**\r\n     * \r\n     */\r\n    state = {\r\n        chartData: {},\r\n        data: this.props.GraphData\r\n    }\r\n    componentDidMount() {\r\n        this.PopulateData()\r\n    }\r\n \r\n    PopulateData = () => {\r\n        this.setState({\r\n            chartData: {\r\n                labels: [...this.state.data.map(x => x.tutname)],\r\n                datasets: [{\r\n                    label: 'Score',\r\n                    data: [...this.state.data.map(x => parseFloat(x.average)),0],\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 1,\r\n                }],\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    render() {\r\n        const options = {\r\n            scales: {\r\n                xAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Tutorial Name'\r\n                    },\r\n                }],\r\n                yAxes: [{\r\n                    display: true,\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: \"Average Score\"\r\n                    },\r\n                }],\r\n            }\r\n            \r\n        }\r\n        return (\r\n            <div>\r\n                <Bar\r\n                    data={this.state.chartData}\r\n                    width={100}\r\n                    height={50}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TutorialAvgGraph","import React, { Component } from 'react'\r\nimport { MDBCol, MDBContainer, MDBRow, MDBTable, MDBBtn, MDBTableBody, MDBTableHead } from 'mdbreact'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { showProfTutorial } from '../Redux/Actions/TutorialAction'\r\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\r\nimport TutorialAvgGraph from '../components/reportpage/TutorialAvgGraph'\r\n\r\n\r\nclass Report extends Component {\r\n    /**\r\n     * state \r\n     * set tutgrp to local storage tutgrp\r\n     * set name to local storage name\r\n     */\r\n    state = {\r\n        tutgrp: localStorage.getItem(\"tutgrp\"),\r\n        name: localStorage.getItem(\"name\"),\r\n    }\r\n    componentDidMount() {\r\n        this.GetTutorials()\r\n        this.props.fetchLeaderboard();\r\n    }\r\n    /**\r\n     * getTutorials\r\n     */\r\n    GetTutorials = () => {\r\n        const form = {\r\n            tutgrp: this.state.tutgrp,\r\n            name: this.state.name\r\n        }\r\n        this.props.showProfTutorial(form);\r\n    }\r\n    /**\r\n     * View Report\r\n     * @param {*} tutid \r\n     * @param {*} tutname \r\n     */\r\n    ViewReport = (tutid, tutname) => {\r\n        localStorage.setItem(\"selectedTutId\", tutid)\r\n        localStorage.setItem(\"selectedTutName\", tutname)\r\n        this.props.history.push(\"/report\")\r\n    }\r\n    /**\r\n     * goBack\r\n     */\r\n    goBack = () => this.props.history.push('/home')\r\n    /**\r\n     * ReportHome page\r\n     * @returns ReportHome page\r\n     */\r\n    render() {\r\n        let uniqueTutId = this.props.leaderboard.reduce((results, org) => {\r\n            (results[org.tutid] = results[org.tutid] || []).push(org);\r\n            return results\r\n        }, {})\r\n        let convertKeytoArray = Object.keys(uniqueTutId).map(k => {\r\n            return uniqueTutId[k]\r\n        })\r\n\r\n        let tutidAvg = []\r\n        convertKeytoArray.map(tutid => {\r\n            let averageOnEachtut = (tutid.map(x => parseFloat(x.score)).reduce((total, current) => total += current, 0) / tutid.length).toFixed(2)\r\n            let getTutName = this.props.tutorialtable.filter(x => x.tutid === tutid[0].tutid).map(z => z.tutname)\r\n            tutidAvg.push({ tutname: getTutName[0], average: averageOnEachtut })\r\n        })\r\n\r\n        let display = this.props.tutorialtable.map(x => {\r\n            return (\r\n                <tr key={x.tutid}>\r\n                    <td>{x.tutname}</td>\r\n                    <td>{x.tutgrp}</td>\r\n                    <td>{x.createdby}</td>\r\n                    <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => this.ViewReport(x.tutid, x.tutname)}> View </MDBBtn>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <Navbar />\r\n                <br />\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"12\">\r\n                            <h3>Select Tutorial To View Report Summary</h3>\r\n                            <hr />\r\n                            <MDBTable striped hover>\r\n                                <MDBTableHead>\r\n                                    <tr>\r\n                                        <th>Assignment Name</th>\r\n                                        <th>Tutorial Group</th>\r\n                                        <th>Created by</th>\r\n                                        <th>View</th>\r\n                                    </tr>\r\n                                </MDBTableHead>\r\n                                <MDBTableBody>\r\n                                    {display}\r\n                                </MDBTableBody>\r\n                            </MDBTable>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <br/>\r\n                    <MDBRow>\r\n                        <MDBCol size=\"12\">\r\n                            <h3>Overall Tutorial Performance</h3>\r\n                            <hr/>\r\n                            <TutorialAvgGraph GraphData={tutidAvg} />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBBtn onClick={this.goBack} color=\"red\">Back</MDBBtn>\r\n                </MDBContainer>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nReport.propTypes = {\r\n    showProfTutorial: PropTypes.func.isRequired,\r\n    fetchLeaderboard: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    tutorialtable: state.tutorial.tutorialgrp,\r\n    leaderboard: state.game.records,\r\n});\r\n\r\nexport default connect(mapStateToProps, { showProfTutorial, fetchLeaderboard })(Report)","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Question from '../pages/Question';\r\nimport Home from '../pages/Home';\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\nimport Assignment from '../pages/Assignment';\r\nimport Logout from '../pages/Logout';\r\nimport Marking from '../pages/Marking';\r\nimport MarkingHome from '../pages/MarkingHome';\r\nimport StudentSelect from '../pages/StudentSelect';\r\nimport StudentMain from '../pages/StudentMain';\r\nimport StudentProfile from '../pages/StudentProfile';\r\nimport ProfessorProfile from '../pages/ProfessorProfile';\r\nimport StudentNews from '../pages/StudentNews';\r\nimport Compete from '../pages/Compete';\r\nimport Challenger from '../pages/Challenger';\r\nimport Competitor from '../pages/Competitor';\r\nimport Challenge from '../pages/Challenge';\r\nimport MySubmission from '../pages/MySubmission';\r\nimport Report from '../pages/Report';\r\nimport ReportHome from '../pages/ReportHome';\r\n\r\n\r\nclass Routes extends React.Component {\r\n  /**\r\n   * Routes\r\n   * @returns the path of each route\r\n   */\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path='/' component={Login} />\r\n        <Route path='/home' component={Home} />\r\n        <Route path='/register' component={Register} />\r\n        <Route path='/question/:tutid' component={Question} />\r\n        <Route path='/assignment' component={Assignment} />\r\n        <Route path='/seltut' component={MarkingHome} />\r\n        <Route path='/student/:tutid' component={StudentSelect} />\r\n        <Route path='/marking/:id/:studid' component={Marking} />\r\n        <Route path='/logout' component={Logout} />\r\n        <Route path='/studentmain' component={StudentMain} />\r\n        <Route path='/studentprofile' component={StudentProfile} />\r\n        <Route path='/professorprofile' component={ProfessorProfile} />\r\n        <Route path='/studentnews' component={StudentNews} />\r\n        <Route path='/compete' component={Compete} />\r\n        <Route path='/challenger' component={Challenger} />\r\n        <Route path='/competitor' component={Competitor} />\r\n        <Route path='/submission/:id' component={MySubmission} />\r\n        <Route path='/report' component={Report} />\r\n        <Route path='/reporthome' component={ReportHome} />\r\n        <Route path='/challenge' component={Challenge} />\r\n        \r\n        <Route render={() => <h1>Not Found</h1>} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","/**\r\n * set intialstate \r\n * login, status, studentinfo, profinfo, emailcheck, myinfo to []\r\n */\r\nconst initState = {\r\n    login: [],\r\n    status: [],\r\n    studentinfo: [],\r\n    profinfo: [],\r\n    emailcheck: [],\r\n    myInfo: []\r\n};\r\n\r\n/**\r\n * AuthReducer\r\n * @param {*} state \r\n * @param {*} action \r\n * @returns \r\n */\r\nconst AuthReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FACEBOOK_LOGIN':\r\n            return {\r\n                ...state,\r\n                login: action.payload\r\n            }\r\n        case 'EMAIL_LOGIN':\r\n            return {\r\n                ...state,\r\n                login: action.payload\r\n            }\r\n        case 'REGISTER_USER':\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        case 'TESTING':\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        case 'GET_STUDENT_DETAILS':\r\n            return {\r\n                ...state,\r\n                studentinfo: action.payload\r\n            }\r\n        case 'GET_MY_DETAILS':\r\n            return {\r\n                ...state,\r\n                myInfo: action.payload\r\n            }\r\n        case 'GET_PROF_DETAILS':\r\n            return {\r\n                ...state,\r\n                profinfo: action.payload\r\n            }\r\n        case 'UPDATE_PROFILE':\r\n            return {\r\n                ...state,\r\n            }\r\n        case 'FACEBOOK_ACCOUNT_LINK':\r\n            return {\r\n                ...state,\r\n            }\r\n        case 'EMAIL_CHECK':\r\n            return {\r\n                ...state,\r\n                emailcheck: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default AuthReducers;\r\n","/**\r\n * set initialstate\r\n * item to []\r\n */\r\nconst initState = {\r\n    items: [],\r\n};\r\n\r\n/**\r\n * TwitterReducers\r\n * @param {*} state \r\n * @param {*} action \r\n * @returns \r\n */\r\nconst TwitterReducers = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'FETCH_POST':\r\n            return{\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default TwitterReducers;\r\n","/**\r\n * set initialstate\r\n * records, studentlist, submission, completedtut, status, comeptitors.\r\n * challengers, comment, competitors , my score to []\r\n */\r\nconst initState = {\r\n    records: [],\r\n    studentlist: [],\r\n    submission: [],\r\n    completedtut: [],\r\n    status: [],\r\n    competitors: [],\r\n    challengers: [],\r\n    comment: [],\r\n    competitor: [],\r\n    myscore: []\r\n};\r\n\r\n/**\r\n * GameReducers\r\n * @param {*} state \r\n * @param {*} action \r\n * @returns \r\n */\r\nconst GameReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_LEADERBOARD':\r\n            return {\r\n                ...state,\r\n                records: action.payload\r\n            }\r\n        case 'GET_STUDENT_LIST':\r\n            return {\r\n                ...state,\r\n                studentlist: action.payload\r\n            }\r\n        case 'GET_STUDENT_SUBMISSION':\r\n            return {\r\n                ...state,\r\n                submission: action.payload\r\n            }\r\n        case 'UPDATE_SCORES':\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        case 'MY_COMPLETED_TUT':\r\n            return {\r\n                ...state,\r\n                completedtut: action.payload\r\n            }\r\n        case 'SEND_COMPETE_REQUEST':\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        case 'GET_CHALLENGERS':\r\n            return {\r\n                ...state,\r\n                challengers: action.payload\r\n            }\r\n        case 'GET_COMPETITORS':\r\n            return {\r\n                ...state,\r\n                competitors: action.payload\r\n            }\r\n        case 'SEND_COMMENT':\r\n            return {\r\n                ...state,\r\n                status: action.payload\r\n            }\r\n        case 'GET_COMMENT':\r\n            return {\r\n                ...state,\r\n                comment: action.payload\r\n            }\r\n        case 'GET_MY_SCORE':\r\n            return {\r\n                ...state,\r\n                myscore: action.payload\r\n            }\r\n        case 'GET_COMPETITOR_SCORE':\r\n            return {\r\n                ...state,\r\n                competitor: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default GameReducers;\r\n","/**\r\n * set initialstate\r\n * tutoriialgrp to []\r\n * statis to false\r\n */\r\nconst initState = {\r\n    tutorialgrp: [],\r\n    status: false\r\n};\r\n\r\n/**\r\n * TutorialReducers\r\n * @param {*} state \r\n * @param {*} action \r\n * @returns \r\n */\r\nconst TutorialReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TUTORIAL':\r\n            return {\r\n                ...state,\r\n                tutorialgrp: [...state.tutorialgrp, ...action.payload],\r\n            }\r\n        case 'DELETE_TUTORIAL':\r\n            return {\r\n                ...state,\r\n                tutorialgrp: state.tutorialgrp.filter(x => x.tutid !== action.tutid)\r\n            }\r\n        case 'FETCH_TUTORIAL':\r\n            return {\r\n                ...state,\r\n                tutorialgrp: action.payload\r\n            }\r\n        case 'FETCH_USER_TUTORIAL':\r\n            return {\r\n                ...state,\r\n                tutorialgrp: action.payload\r\n            }\r\n        case 'FETCH_PROF_TUTORIAL':\r\n            return {\r\n                ...state,\r\n                tutorialgrp: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default TutorialReducers;\r\n","/**\r\n * set initialstate\r\n * question, tutquestions to []\r\n */\r\nconst initState = {\r\n    questions: [],\r\n    tutquestions: []\r\n};\r\n\r\n/**\r\n * QeustReducers\r\n * @param {*} state \r\n * @param {*} action \r\n * @returns \r\n */\r\nconst QuestReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'SHOW_ALL_QUESTION':\r\n            return {\r\n                ...state,\r\n                questions: action.payload\r\n            }\r\n        case 'SHOW_TUT_QUESTION':\r\n            return {\r\n                ...state,\r\n                tutquestions: action.payload\r\n            }\r\n        case 'REMOVE_QUESTION':\r\n            return {\r\n                ...state,\r\n                tutquestions: state.tutquestions.filter(x => x.questid !== action.payload)\r\n            }\r\n        case 'ADD_QUESTION':\r\n            return {\r\n                ...state,\r\n                tutquestions: [...state.tutquestions, ...action.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default QuestReducers;\r\n","import { combineReducers } from 'redux';\r\nimport AuthReducers from './AuthReducers';\r\nimport TwitterReducers from './TwitterReducers'\r\nimport GameReducers from './GameReducers'\r\nimport TutorialReducers from './TutorialReducers';\r\nimport QuestReducers from './QuestReducers';\r\n\r\n/**\r\n * RootReducer\r\n */\r\nconst RootReducer = combineReducers({\r\n    twitter: TwitterReducers,\r\n    auth: AuthReducers,\r\n    game: GameReducers,\r\n    tutorial: TutorialReducers,\r\n    quest: QuestReducers\r\n});\r\n\r\nexport default RootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport RootReducer from '../Reducers/RootReducer'\r\n\r\n/**\r\n * create initial state\r\n */\r\nconst initialState = {};\r\nconst middleWare = [thunk];\r\nconst store = createStore(RootReducer, initialState, applyMiddleware(...middleWare));\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport Routes from './router/Routes';\r\nimport Store from './Redux/Store/Store';\r\nimport { Provider } from 'react-redux';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    collapseID: ''\r\n  };\r\n  render() {\r\n\r\n    const { collapseID } = this.state;\r\n    return (\r\n      <Provider store={Store}>\r\n        <Router>\r\n          <div className='flyout'>\r\n            {collapseID && overlay}\r\n            <main style={{ marginTop: '4rem' }}>\r\n              <Routes />\r\n            </main>  \r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render( <App /> , document.getElementById('root'));\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}